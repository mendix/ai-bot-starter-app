/// Generates a context rule, which generates scoped rules to a given selector and appends a context name.
/// This enables specificity overrides based on context.
/// @example scss
/// .grey {
///    @include context($name: "summer", $selector: ".theme-summer") {
///     color: grey;
///    }
/// }
/// @output
/// .themable {
///   color: grey;
/// }
/// .theme-summer .themable:summer {
///   color: grey;
/// }

@mixin context($name, $selector, $selector-is-on-html-element: false, $content-is-context-only: false) {
  @if not $content-is-context-only {
    @content;
  }
  @if $selector-is-on-html-element {
    @at-root :--namespace#{$selector} &\:#{$name} {
      @content;
    }
  } @else {
    #{$selector} &\:#{$name} {
      @content;
    }
  }
}

/// Easy to use dark theme context
@mixin dark-context {
  @include context($name: "dark", $selector: ".theme-dark", $selector-is-on-html-element: true) {
    @content;
  }
}
