@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";
@use "sass:math";

/// Make an element an overlay within its parent via `position: absolute`.
/// Mixin accepts any combination of the strings "top", "bottom", "left", "right", "fixed".
/// Additionally assign a non-zero value to use for these position properties.
/// Also accepts a map for more complex arrangements.
/// @param {string | number | map} $args
/// @example scss
///  @include make-overlay; // { position: absolute; top: 0; bottom: auto; left: 0; right: 0;}
/// @example scss
///  @include make-overlay("top"); //{ position:absolute; top:0; bottom:auto; left:0; right:0 }
/// @example scss
///  @include make-overlay(left, "bottom"); // { position: absolute; top: auto; bottom: 0; left: 0; right: auto; }
/// @example scss
///  @include make-overlay(right, top, fixed); // { position: fixed; top: 0; bottom: auto; left: auto; right: 0; }
/// @example scss
///  @include make-overlay(bottom, 16px); { position: absolute; top: auto; bottom: 16px; left: 0; right: 0; }
/// @example scss
///  @include make-overlay( fixed, (top: 16px, bottom: 4rem, left: 3%) ); // { position: fixed; top: 16px; bottom: 4rem; left: 3%; right: auto; }

@mixin make-overlay($args...) {
  $valid-args: (
    "top": (
      bottom: auto,
    ),
    "bottom": (
      top: auto,
    ),
    "left": (
      right: auto,
    ),
    "right": (
      left: auto,
    ),
    "fixed": (
      position: fixed,
    ),
  );

  $valid-customise-props: ("top", "bottom", "left", "right");

  $styles: (
    position: absolute,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
  );

  $prev: null;
  @each $arg in $args {
    $type: meta.type-of($arg);

    @if ($type == string) {
      @if not map.has-key($valid-args, $arg) {
        @error "Invalid argument: #{$arg}. Use one of #{map.keys($valid-args)} instead.";
      } @else {
        $styles: map.merge($styles, map.get($valid-args, $arg));
        $prev: $arg;
      }
    } @else if ($type == number) {
      // Assigning to the previous arg. Must have a unit. $prev cannot be "fixed".
      @if (math.is-unitless($arg)) {
        @error "Invalid argument: Please provide a unit for #{$arg}.";
      } @else if not $prev {
        @error "Invalid argument: #{$arg}. Please pass a valid property to assign value #{$arg}.";
      } @else if $prev == fixed {
        @error "Cannot assign a value when argument is 'fixed'.";
      } @else {
        $styles: map.merge(
          $styles,
          (
            $prev: $arg,
          )
        );
        $prev: null;
      }
    } @else if ($type == map) {
      @each $key, $value in $arg {
        @if not list.index($valid-customise-props, $key) {
          @error "Invalid property: #{$key}. Use one of #{$valid-customise-props} instead.";
        }
        $styles: map.merge($styles, map.get($valid-args, $key));
      }
      $styles: map.merge($styles, $arg);
      $prev: null;
    } @else {
      @error "Invalid arguments. Mixin only accepts strings, maps, or number values";
    }
  }
  @each $prop, $value in $styles {
    #{$prop}: $value;
  }
}
