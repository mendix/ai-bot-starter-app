@use "../constants/button";
@use "../constants/forms";
@use "../constants/animation";
@use "icon" as *;
@use "sass:list";

///
/// @mixin make-button-size()
/// Creates size-related button styles. Use within size modifier classes where base styles are already set.
/// @param {String} $size. One of "small", "medium", "large".
/// @tag tag-button tag-actions tag-clickable
@mixin make-button-size($size) {
  @if $size == "small" {
    --icon-size: #{button.$icon-size-small};
    --padding-inline: #{button.$padding-small-h};
    --button-size: #{button.$size-small};
    font-size: button.$font-size-small;
    gap: button.$gap-small;
    //
  } @else if $size == "medium" {
    --icon-size: #{button.$icon-size-medium};
    --padding-inline: #{button.$padding-regular-h};
    --button-size: #{button.$size};
    font-size: button.$font-size;
    gap: button.$gap-medium;
    //
  } @else if $size == "large" {
    --icon-size: #{button.$icon-size-large};
    --padding-inline: #{button.$padding-large-h};
    --button-size: #{button.$size-large};
    font-size: button.$font-size-large;
    gap: button.$gap-large;
    //
  } @else {
    @error "Invalid size. Use one of small, medium, large.";
  }
}

///
/// @mixin make-button-base()
/// Creates shared button styles. Use in combination with make-button-variant()
/// Typically use this when styling buttons within widgets because they are not accessible in Studio Pro.
/// @param {String} $size ["medium"]. One of "small", "medium", "large".
/// @tag tag-button tag-actions tag-clickable
@mixin make-button-base($size: "medium") {
  @include make-button-size($size);
  //
  display: inline-flex;
  flex-direction: row;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  border-radius: button.$border-radius;
  cursor: pointer;
  font-weight: button.$font-weight;
  line-height: 1;
  height: var(--button-size);
  min-width: button.$min-width;
  padding: 0 var(--padding-inline);
  text-decoration: none;
  box-shadow: none; // Bootstrap override
  transition: button.$hover-transition;
  appearance: none;
  user-select: none;
  outline-color: transparent;
  outline-offset: 0px;
  outline-style: solid;
  outline-width: forms.$focus-border-width;

  &:focus-visible {
    outline-color: forms.$color-focus;
    outline-offset: forms.$focus-border-width;
  }
}

///
/// @mixin make-button-variant()
/// Creates variant button styles. Use in combination with @mixin make-button-base()
/// Typically use this when styling buttons within widgets because they are not accessible in Studio Pro.
/// @param {String} $color. One of "grey", "blue", "red", "light", "dark".
/// @param {String} $style. One of "fill", "outline", "text".
/// @tag tag-button tag-actions tag-clickable
@mixin make-button-variant($color, $style) {
  @if not list.index(("grey", "blue", "red", "light", "dark"), $color) {
    @error 'Invalid color: #{$color}. Use only "grey", "blue", "red", "light", "dark".';
  }
  @if not list.index(("fill", "outline", "text"), $style) {
    @error 'Invalid style: #{$style}. Use only "fill", "outline", "text"';
  }
  --color: var(--text-button-#{$style}-#{$color}-default); // needed to color loading spinner
  //
  color: var(--color);
  border: 1px solid var(--border-button-#{$style}-#{$color}-default);
  background-color: var(--background-button-#{$style}-#{$color}-default);

  &:hover {
    --color: var(--text-button-#{$style}-#{$color}-hover);
    border-color: var(--border-button-#{$style}-#{$color}-hover);
    background-color: var(--background-button-#{$style}-#{$color}-hover);
  }

  &:active,
  &.active,
  .open > &.dropdown-toggle {
    --color: var(--text-button-#{$style}-#{$color}-active);
    border-color: var(--border-button-#{$style}-#{$color}-active);
    background-color: var(--background-button-#{$style}-#{$color}-active);
  }
}

///
/// @mixin make-button()
/// Created as a constructor to allow elements to inherit button styles. Combines usage of make-button-base, make-button-size and make-button-variant.
/// Typically use this when styling buttons within widgets because they are not accessible in Studio Pro.
/// @param {String} $color ["grey"]. One of "grey", "blue", "red", "light", "dark".
/// @param {String} $style ["fill"]. One of "fill", "outline", "text".
/// @param {String} $size ["medium"]. One of "small", "medium", "large.
/// @param {Boolean} $include-base [true] will output the base styles. BEM modifiers should pass false, since they should already inherit base styles.
/// @param {Boolean} $compact [false]
/// @tag tag-button tag-actions tag-clickable
@mixin make-button($color: "grey", $style: "fill", $size: "medium", $compact: false, $include-base: true) {
  @if $include-base {
    @include make-button-base($size);
  } @else {
    @include make-button-size($size);
  }
  @include make-button-variant($color, $style);
  @if $compact {
    --padding-inline: 0;
    min-width: var(--button-size);
  }
}

///
/// @mixin make-icon-button()
/// Ease of use mixin which creates a compact text button for icon-only buttons.
/// Will hide any button text and only show the icon.
/// @param {String} $color ["grey"]. One of "grey", "blue", "red", "light", "dark".
/// @param {String} $size ["medium"]. One of "small", "medium", "large.
/// @param {String} $icon [null]. Optionally pass in the name of an icon.
/// @tag tag-button tag-actions tag-clickable tag-icon
@mixin make-icon-button($icon: null, $color: "grey", $size: "medium") {
  @include make-button($color: $color, $style: "text", $size: $size, $compact: true);
  @if $icon {
    @include icon($icon, "before");
  }
  text-indent: -9999px;
  white-space: nowrap;
  overflow: hidden;
  position: relative;

  &::before,
  &::after {
    position: absolute;
    text-indent: 0;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
