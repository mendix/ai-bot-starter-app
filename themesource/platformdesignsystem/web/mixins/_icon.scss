/// Creates an icon within a ::before or ::after pseudo-element, according to input.
/// @param {String} $name - the name of the icon according to icons map.
/// @param {Font Size Token} $size [1.5rem] - optional size of the icon.
/// @param {"before" | "after" | null} $position [null] optionally creates the icon as a ::before or ::after pseudo-element
/// @param {Boolean} $include-base [true] If set to false, will not output generic properties, only content and font-size.
/// @example
/// .foo::before {
///   @include icon( "single-woman-actions-refresh", $size: 1em )
/// }
/// @tag tag-icon tag-streamline

@use "../constants/icons";
@use "../functions";

@mixin icon($name: null, $position: null, $size: 1.5rem, $include-base: true) {
  @if (not $name and not $include-base) {
    @error "Variable $name is required if $include-base is false.";
  }

  @if $position == "before" {
    &::before {
      @include icon($name, null, $size, $include-base);
    }
  } @else if $position == "after" {
    &::after {
      @include icon($name, null, $size, $include-base);
    }
  } @else {
    @if $include-base {
      font-family: "streamline", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans",
        "Helvetica Neue", sans-serif !important;
      speak: none;
      font-style: normal;
      font-weight: normal;
      font-variant: normal;
      font-size: var(--icon-size, #{$size});
      text-transform: none;
      line-height: 1;
      vertical-align: middle;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    @if $name {
      $content: map-get(icons.$pds-icons, $name);
      @if not $content {
        @error "The icon #{$name} does not exist!";
      }
      content: functions.unicode($content);
    }
  }
}

@mixin icon-as-content($name) {
  @include icon($name, $include-base: false);
}
