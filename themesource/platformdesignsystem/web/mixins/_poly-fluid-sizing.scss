/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A Sass map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example @include poly-fluid-sizing("font-size", (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
/// @tag tag-font-size tag-linear-sizing tag-between-values

@use "sass:list";
@use "sass:map";
@use "../functions";

@mixin poly-fluid-sizing($property, $map) {
  // Get the number of provided breakpoints
  $length: list.length($map);

  // Error if the number of breakpoints is < 2
  @if ($length < 2) {
    @error "poly-fluid-sizing() $map requires at least 2 values";
  }

  // Sort the map by viewport width (key)
  $keys: map.keys($map);

  // Minimum size
  #{$property}: map.get($map, list.nth($keys, 1));

  // Interpolated size through breakpoints
  @for $i from 1 through ($length - 1) {
    @media (min-width: list.nth($keys,$i)) {
      $value1: map.get($map, list.nth($keys, $i));
      $value2: map.get($map, list.nth($keys, ($i + 1)));
      // If values are not equal, perform linear interpolation
      @if ($value1 != $value2) {
        #{$property}: functions.linear-interpolation(
          (
            nth($keys, $i): $value1,
            nth($keys, ($i + 1)): $value2
          )
        );
      } @else {
        #{$property}: $value1;
      }
    }
  }

  // Maximum size
  @media (min-width: list.nth($keys,$length)) {
    #{$property}: map.get($map, list.nth($keys, $length));
  }
}
