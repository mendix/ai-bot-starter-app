/// NOTE BY PDS TEAM
/// This file is required for the PDS SCSS unit tests.
/// This file holds a copy of the SCSS _throw.scss and _messages.scss files from the sass-true node package.
///   The only adaptions made are to make these a single file.
/// @error always stops the CSS compilation. The `throw` function allows both (keep going/stop), which
///   allows the test suite to run all the tests instead of stopping after one failing test.
/// @see node-modules/sass-true/sass/config/throw
/// @see node-modules/sass-true/sass/config/messages

/// Below are the copies of the two files.

/// _messages.scss

@use "sass:list";

// True Message
// ------------
/// Output a message to CSS comments,
/// or command line terminal (via debug/warn)
/// @access private
/// @group private-message
/// @param {String} $message -
///   Message to output
/// @param {String} $output [comments] -
///   Type of output, either `comments`, `terminal`, `debug` or `warn`
@mixin _message($message, $output: "comments", $comment-padding: 0) {
  $pad: "";

  @if ($comment-padding > 0) {
    @for $i from 0 to $comment-padding {
      $pad: $pad + " ";
    }
  }

  @each $line in $message {
    @if list.index($output, "comments") {
      // sass-lint:disable-line no-empty-rulesets

      /* #{$pad + $line} */ // sass-lint:disable-line no-css-comments
    }

    @if list.index($output, "debug") or list.index($output, "terminal") {
      @debug $line; // sass-lint:disable-line no-debug
    }

    @if list.index($output, "warn") {
      @warn $line;
    }
  }
}

/// _throw.scss

/// # Catching & Testing Errors
/// Sass doesn't (yet) provide a way to catch errors,
/// but we provide a workaround that works for many use-cases
/// (especially unit-testing error states).
/// @group api-errors
/// @since v6.0

/// By default, the `error()` function and mixin
/// will simply pass details along to the built-in Sass `@error` declaration.
/// This setting allows you to avoid throwing errors that stop compilation,
/// and return them as values (for functions)
/// or output CSS comments (for mixins) instead.
///
/// Any "true" value will catch errors,
/// but a value of `warn` will also show warnings in the command-line output.
/// @since v6.0
/// @access public
/// @group api-settings
/// @type bool | 'warn'
/// @see {function} error
$catch-errors: false !default;

// Format an error prefix, with source if available
@function _prefix($source) {
  @return if($source, "ERROR [#{$source}]:", "ERROR:");
}

/// Use in place of `@error` statements inside functions.
/// When the `$catch` parameter
/// (or global `$catch-errors` setting) is set,
/// the function will return errors without stopping compilation.
/// This can be used to test errors as return values with True,
/// or to "catch" errors and handle them in different ways.
/// @access public
/// @group api-errors
/// @since v6.0
/// @param {string} $message -
///   The error message to report
/// @param {string} $source [null] -
///   The source of the error, for additional context
/// @param {bool | 'warn'} $catch [$catch-errors] -
///   Optionally catch errors,
///   and return them as values without stopping compilation
/// @return {string}
///   A message detailing the source and error,
///   when `$catch` is true
/// @throw
///   A message detailing the source and error,
///   when `$catch` is false
/// @example scss
///   @use 'throw';
///   @use 'sass:meta';
///
///   @function add($a, $b) {
///     @if (meta.type-of($a) != 'number') or (meta.type-of($b) != 'number') {
///       @return throw.error(
///         $message: '$a and $b must both be numbers',
///         $source: 'add()',
///         $catch: true
///       );
///     }
///     @return $a + $b;
///   }
///
///   .demo { width: add(3em, 'hello'); }
@function error($message, $source: null, $catch: $catch-errors) {
  @if $catch {
    @if ($catch == "warn") {
      @warn $message;
    }
    @return "#{_prefix($source)} #{$message}";
  }

  @error $message;
}

/// Use in place of `@error` statements inside mixins
/// or other control structures with CSS output (not functions).
/// When the `$catch` parameter
/// (or global `$catch-errors` setting) is set,
/// the function will output errors as comments without stopping compilation.
/// This can be used to test errors as return values with True,
/// or to "catch" errors and handle them in different ways.
///
/// Since True results rely on completing compilation,
/// we do not have a way to "error out" of the code being tested.
/// If there is code that needs to be skipped after an error,
/// we recommend using explicit Sass conditional (if/else) statements
/// to avoid compounding the problem:
///
/// ```scss
///  @mixin width ($length) {
///    @if (meta.type-of($length) != number) {
///      @include true.error("$length must be a number", "width", true);
///    @else {
///      // The @else block hides any remaining output
///      width: $length;
///    }
///  }
/// ```
///
/// @access public
/// @group api-errors
/// @since v6.0
/// @param {string | list} $message -
///   The error message to report
/// @param {string} $source [null] -
///   The source of the error, for additional context
/// @param {bool | 'warn'} $catch [$catch-errors] -
///   Optionally catch errors,
///   and output them as CSS comments without stopping compilation
/// @output
///   A message detailing the source and error,
///   when `$catch` is true
/// @throw
///   A message detailing the source and error,
///   when `$catch` is false
/// @example scss
///   @use 'throw';
///   $run: 5; $total: 6;
///
///   @if ($run != $total) {
///     @include throw.error(
///       $message: 'The results donâ€™t add up.',
///       $source: 'report',
///       $catch: true
///     );
///   }
@mixin error($message, $source: null, $catch: $catch-errors) {
  @if $catch {
    @if ($catch == "warn") {
      @warn $message;
    }
    @include _message(_prefix($source), "comments");
    @include _message($message, "comments", $comment-padding: 2);
  } @else {
    @error $message;
  }
}
