/// Function last-selector() - will return the last selector in a compound selector.
/// @param {Selector | String} $complex-selector - intended to work with the parent selector `&`, but can also accept a string representation of any selector.
/// The string or list must not be comma-separated, ie only one compound selector is valid.
/// @example last-selector(".foo .bar") => ".bar"
/// @example last-selector(".foo, .bar") => Error

@use "sass:selector";
@use "sass:list";
@use "throw";

@function last-selector($complex-selector) {
  @if type-of($complex-selector) == string {
    // turn it into a proper selector, which is a list.
    $complex-selector: selector.parse($complex-selector);
  }
  /**
  A Selector type is a comma-separated list, 
  of space-separated lists,
  of unquoted strings containing primitive selectors.
      
  So even a selector with one primitive selector is a list of one within a list of one.
  Here, we only supprt a complex Selector list with a length of one.
  **/
  @if type-of($complex-selector) == list {
    @if (list.length($complex-selector) > 1) {
      @return throw.error($message: "Only one complex selector is supported!");
    } @else {
      // Return the last primitive selector in the first and only complex selector
      @return list.nth(list.nth($complex-selector, 1), -1);
    }
  } @else {
    @return throw.error("Invalid type: " + type-of($complex-selector));
  }
}
