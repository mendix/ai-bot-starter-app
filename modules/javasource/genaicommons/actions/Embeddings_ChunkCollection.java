// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Use the microflow Embeddings_Execute_ChunkCollection to execute an embeddings API call with a ChunkCollection containing one or multiple Chunk objects. The resulting embedding vectors returned by the model end up in the EmbeddingVector string attribute of the original Chunks.
 * Inputs:
 * - ChunkCollection: This is a wrapper object for a list of Chunk objects with InputTexts for which an embeddings vector should be generated. Use operations from GenAI commons to create a ChunkCollection and add Chunks or KnowledgeBaseChunks to it.
 * - DeployedModel: The DeployedModel entity replaces the Connection entity. It contains the name of the microflow to be executed for the specified model and other information relevant to connect to a model. The OutputModality needs to be Embeddings.
 * - EmbeddingOptions (optional): This can be used to specify optional attributes like vector dimension. Note that not all models may support all embeddings options attributes.
 * 
 * Output: 
 * This is a response object containing token usage metric and pointing to a ChunkCollection. The ChunkCollection contains the chunk for which an embedding vector was created. Note that the EmbeddingVector gets updated on the original objects. So for further logic, the ChunkCollection used as input for this operation can be reused and is the same as the ChunkCollection to which the EmbeddingsResponse is pointing.
 */
public class Embeddings_ChunkCollection extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use DeployedModel.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __DeployedModel;
	private final genaicommons.proxies.DeployedModel DeployedModel;
	/** @deprecated use ChunkCollection.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __ChunkCollection;
	private final genaicommons.proxies.ChunkCollection ChunkCollection;
	/** @deprecated use EmbeddingsOptions.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __EmbeddingsOptions;
	private final genaicommons.proxies.EmbeddingsOptions EmbeddingsOptions;

	public Embeddings_ChunkCollection(
		IContext context,
		IMendixObject _deployedModel,
		IMendixObject _chunkCollection,
		IMendixObject _embeddingsOptions
	)
	{
		super(context);
		this.__DeployedModel = _deployedModel;
		this.DeployedModel = _deployedModel == null ? null : genaicommons.proxies.DeployedModel.initialize(getContext(), _deployedModel);
		this.__ChunkCollection = _chunkCollection;
		this.ChunkCollection = _chunkCollection == null ? null : genaicommons.proxies.ChunkCollection.initialize(getContext(), _chunkCollection);
		this.__EmbeddingsOptions = _embeddingsOptions;
		this.EmbeddingsOptions = _embeddingsOptions == null ? null : genaicommons.proxies.EmbeddingsOptions.initialize(getContext(), _embeddingsOptions);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Java action was not implemented");
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Embeddings_ChunkCollection";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
