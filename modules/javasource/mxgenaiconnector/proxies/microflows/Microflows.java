// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package mxgenaiconnector.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the MxGenAIConnector module
	/**
	 * Use this operation to add chunks to a Collection. This operation handles a batch of chunks with their metadata in a single operation.
	 * 
	 * This operation takes care of the creation of the actual tables if needed. Duplications of chunks are not handled by this operation (neither when passing duplicates in the ChunkCollection nor checking an existing knowledge base prior to inserting).
	 * Use ChunkCollection_Create and ChunkCollection_AddKnowledgeBaseChunk to construct the input for this microflow, which needs to be passed as ChunkCollection.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base. By providing the CollectionName on the Connection, you determine the collection in which the chunks should be inserted.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * Once inserted, chunks are available for read operations in the KB within 60-120 seconds due to asynchronous data synchronization for better scalability.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder chunkCollection_Embed_InsertBuilder(
		genaicommons.proxies.Connection _connection,
		genaicommons.proxies.ChunkCollection _chunkCollection
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.ChunkCollection_Embed_Insert");
		builder = builder.withParam("Connection", _connection);
		builder = builder.withParam("ChunkCollection", _chunkCollection);
		return builder;
	}

	/**
	 * Use this operation to add chunks to a Collection. This operation handles a batch of chunks with their metadata in a single operation.
	 * 
	 * This operation takes care of the creation of the actual tables if needed. Duplications of chunks are not handled by this operation (neither when passing duplicates in the ChunkCollection nor checking an existing knowledge base prior to inserting).
	 * Use ChunkCollection_Create and ChunkCollection_AddKnowledgeBaseChunk to construct the input for this microflow, which needs to be passed as ChunkCollection.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base. By providing the CollectionName on the Connection, you determine the collection in which the chunks should be inserted.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * Once inserted, chunks are available for read operations in the KB within 60-120 seconds due to asynchronous data synchronization for better scalability.
	 */
	public static boolean chunkCollection_Embed_Insert(
		IContext context,
		genaicommons.proxies.Connection _connection,
		genaicommons.proxies.ChunkCollection _chunkCollection
	)
	{
		Object result = chunkCollection_Embed_InsertBuilder(
				_connection,
				_chunkCollection
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * Use this operation to replace existing chunks in a Collection based on the MxObjectID. This operation handles a batch of KnowledgebaseChunks in a ChunkCollection with their metadata in a single operation.
	 * Use ChunkCollection_Create and ChunkCollection_AddKnowledgeBaseChunk to construct the input for this microflow, which needs to be passed as a ChunkCollection.
	 * In order to replace the right data in the collection, all chunks in ChunkCollection need a MxObjectID: existing chunks related to those Mendix objects will be deleted from the collection first, and then be inserted according to the new state as specified by the ChunkCollection (metadata included).
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base service. By providing the CollectionName on the Connection, you determine the collection in which the chunks should be replaced.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * Once inserted, chunks are available for read operations in the KB within 60-120 seconds due to asynchronous data synchronization for better scalability. Note that using "Replace" on the same Mendix Objects within this period may lead to the knowledge base being out of sync.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder chunkCollection_Embed_ReplaceBuilder(
		genaicommons.proxies.ChunkCollection _chunkCollection,
		genaicommons.proxies.Connection _connection
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.ChunkCollection_Embed_Replace");
		builder = builder.withParam("ChunkCollection", _chunkCollection);
		builder = builder.withParam("Connection", _connection);
		return builder;
	}

	/**
	 * Use this operation to replace existing chunks in a Collection based on the MxObjectID. This operation handles a batch of KnowledgebaseChunks in a ChunkCollection with their metadata in a single operation.
	 * Use ChunkCollection_Create and ChunkCollection_AddKnowledgeBaseChunk to construct the input for this microflow, which needs to be passed as a ChunkCollection.
	 * In order to replace the right data in the collection, all chunks in ChunkCollection need a MxObjectID: existing chunks related to those Mendix objects will be deleted from the collection first, and then be inserted according to the new state as specified by the ChunkCollection (metadata included).
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base service. By providing the CollectionName on the Connection, you determine the collection in which the chunks should be replaced.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * Once inserted, chunks are available for read operations in the KB within 60-120 seconds due to asynchronous data synchronization for better scalability. Note that using "Replace" on the same Mendix Objects within this period may lead to the knowledge base being out of sync.
	 */
	public static boolean chunkCollection_Embed_Replace(
		IContext context,
		genaicommons.proxies.ChunkCollection _chunkCollection,
		genaicommons.proxies.Connection _connection
	)
	{
		Object result = chunkCollection_Embed_ReplaceBuilder(
				_chunkCollection,
				_connection
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * Use this operation to (re-)populate a whole collection with a ChunkCollection.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base. By providing the CollectionName on the Connection, you determine the collection in which the chunks should be inserted.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * If the collection already contains data, it will be removed before inserting the KnowledgeBaseChunks of the ChunkCollection.
	 * 
	 * Once inserted, chunks are available for read operations in the KB within 60-120 seconds due to asynchronous data synchronization for better scalability.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder chunkCollection_Embed_RepopulateCollectionBuilder(
		genaicommons.proxies.Connection _connection,
		genaicommons.proxies.ChunkCollection _chunkCollection
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.ChunkCollection_Embed_RepopulateCollection");
		builder = builder.withParam("Connection", _connection);
		builder = builder.withParam("ChunkCollection", _chunkCollection);
		return builder;
	}

	/**
	 * Use this operation to (re-)populate a whole collection with a ChunkCollection.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base. By providing the CollectionName on the Connection, you determine the collection in which the chunks should be inserted.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * If the collection already contains data, it will be removed before inserting the KnowledgeBaseChunks of the ChunkCollection.
	 * 
	 * Once inserted, chunks are available for read operations in the KB within 60-120 seconds due to asynchronous data synchronization for better scalability.
	 */
	public static boolean chunkCollection_Embed_RepopulateCollection(
		IContext context,
		genaicommons.proxies.Connection _connection,
		genaicommons.proxies.ChunkCollection _chunkCollection
	)
	{
		Object result = chunkCollection_Embed_RepopulateCollectionBuilder(
				_connection,
				_chunkCollection
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * Use this operation to delete a complete collection at once. 
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base service. By providing the CollectionName on the Connection, you determine the collection that is to be deleted. Use MxKnowledgeBaseConnection_Create to create this.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder collection_DeleteBuilder(
		genaicommons.proxies.Connection _connection
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.Collection_Delete");
		builder = builder.withParam("Connection", _connection);
		return builder;
	}

	/**
	 * Use this operation to delete a complete collection at once. 
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base service. By providing the CollectionName on the Connection, you determine the collection that is to be deleted. Use MxKnowledgeBaseConnection_Create to create this.
	 */
	public static boolean collection_Delete(
		IContext context,
		genaicommons.proxies.Connection _connection
	)
	{
		Object result = collection_DeleteBuilder(
				_connection
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * Use this operation to get all collections that belong to a Knowledge Base Configuration. A list of type "Collection" is returned.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and a MxCloudKnowledgeBase associated with the connection details to the knowledge base service.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder collection_GetListBuilder(
		genaicommons.proxies.Connection _connection
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.Collection_GetList");
		builder = builder.withParam("Connection", _connection);
		return builder;
	}

	/**
	 * Use this operation to get all collections that belong to a Knowledge Base Configuration. A list of type "Collection" is returned.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and a MxCloudKnowledgeBase associated with the connection details to the knowledge base service.
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 */
	public static java.util.List<mxgenaiconnector.proxies.Collection> collection_GetList(
		IContext context,
		genaicommons.proxies.Connection _connection
	)
	{
		Object result = collection_GetListBuilder(
				_connection
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> mxgenaiconnector.proxies.Collection.initialize(context, obj));
	}
	/**
	 * Converts the configuration string into a configuration object. 
	 * Overwrites an existing configuration with the same ID.
	 * 
	 * Can be used in microflows, for instance After Startup.
	 * 
	 * Returns false if the input is not valid and no object was created.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder configuration_RegisterByStringBuilder(
		java.lang.String _configurationStringImport
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.Configuration_RegisterByString");
		builder = builder.withParam("ConfigurationStringImport", _configurationStringImport);
		return builder;
	}

	/**
	 * Converts the configuration string into a configuration object. 
	 * Overwrites an existing configuration with the same ID.
	 * 
	 * Can be used in microflows, for instance After Startup.
	 * 
	 * Returns false if the input is not valid and no object was created.
	 */
	public static mxgenaiconnector.proxies.Configuration configuration_RegisterByString(
		IContext context,
		java.lang.String _configurationStringImport
	)
	{
		Object result = configuration_RegisterByStringBuilder(
				_configurationStringImport
			)
			.execute(context);
		return result == null ? null : mxgenaiconnector.proxies.Configuration.initialize(context, (IMendixObject) result);
	}
	/**
	 * Use this operation to retrieve chunks from a collection. The retrieval is based on similarity with respect to the input string (Content) provided.  This operation returns a list of KnowledgeBaseChunk. The returned list is sorted on vector similarity which is handled internally.
	 * Additional filtering can be done by specifying the optional input parameters:
	 * -MinimumSimilarity (in the range 0-1.0): acts as a cut-off: chunks are not retrieved if they have a similarity below this value.
	 * -MaxNumberOfResults: determines the max number of similar chunks that are returned.
	 * -MetadataCollection: when provided, this operation only returns chunks that are conform with all of the metadata key/value pairs in the collection.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base. By providing the CollectionName on the Connection, you determine the collection for which the retrieve should happen. 
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * The TargetChunk entity (type parameter) must be a specialization of the KnowledgeBaseChunk entity from the GenAICommons. If it contains associations to (specializations of) the related mendix object for which the chunk was created originally, this will be set by this operation for easy processing afterwards.
	 * 
	 * Previously inserted or changed chunks are only available in the knowledge base after 60-120 seconds due to asynchronous data synchronization for better scalability.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder knowledgeBaseChunkList_Embed_RetrieveNearestNeighborsBuilder(
		java.lang.String _content,
		java.math.BigDecimal _minimumSimilarity,
		java.lang.Long _maxNumberOfResults,
		genaicommons.proxies.Connection _connection,
		genaicommons.proxies.MetadataCollection _metadataCollection
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.KnowledgeBaseChunkList_Embed_RetrieveNearestNeighbors");
		builder = builder.withParam("Content", _content);
		builder = builder.withParam("MinimumSimilarity", _minimumSimilarity);
		builder = builder.withParam("MaxNumberOfResults", _maxNumberOfResults);
		builder = builder.withParam("Connection", _connection);
		builder = builder.withParam("MetadataCollection", _metadataCollection);
		return builder;
	}

	/**
	 * Use this operation to retrieve chunks from a collection. The retrieval is based on similarity with respect to the input string (Content) provided.  This operation returns a list of KnowledgeBaseChunk. The returned list is sorted on vector similarity which is handled internally.
	 * Additional filtering can be done by specifying the optional input parameters:
	 * -MinimumSimilarity (in the range 0-1.0): acts as a cut-off: chunks are not retrieved if they have a similarity below this value.
	 * -MaxNumberOfResults: determines the max number of similar chunks that are returned.
	 * -MetadataCollection: when provided, this operation only returns chunks that are conform with all of the metadata key/value pairs in the collection.
	 * 
	 * The Connection entity passed must be of type MxKnowledgeBaseConnection and must contain the CollectionName string attribute filled and a MxCloudKnowledgeBase associated with the connection details to the knowledge base. By providing the CollectionName on the Connection, you determine the collection for which the retrieve should happen. 
	 * Use MxKnowledgeBaseConnection_Create to create it.
	 * 
	 * The TargetChunk entity (type parameter) must be a specialization of the KnowledgeBaseChunk entity from the GenAICommons. If it contains associations to (specializations of) the related mendix object for which the chunk was created originally, this will be set by this operation for easy processing afterwards.
	 * 
	 * Previously inserted or changed chunks are only available in the knowledge base after 60-120 seconds due to asynchronous data synchronization for better scalability.
	 */
	public static java.util.List<genaicommons.proxies.KnowledgeBaseChunk> knowledgeBaseChunkList_Embed_RetrieveNearestNeighbors(
		IContext context,
		java.lang.String _content,
		java.math.BigDecimal _minimumSimilarity,
		java.lang.Long _maxNumberOfResults,
		genaicommons.proxies.Connection _connection,
		genaicommons.proxies.MetadataCollection _metadataCollection
	)
	{
		Object result = knowledgeBaseChunkList_Embed_RetrieveNearestNeighborsBuilder(
				_content,
				_minimumSimilarity,
				_maxNumberOfResults,
				_connection,
				_metadataCollection
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> genaicommons.proxies.KnowledgeBaseChunk.initialize(context, obj));
	}
	/**
	 * Creates a non-persistable connection that contains a configuration with the connection details for the MxCloudKnowledgeBase. This will be used as input for operations that perform knowledge base interactions. The CollectionName is the name of the collection for which the knowledge base interactions should happen.
	 * Note: the collection name cannot contain any whitespace.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mxKnowledgeBaseConnection_CreateBuilder(
		mxgenaiconnector.proxies.MxCloudKnowledgeBase _mxCloudKnowledgeBase,
		java.lang.String _collectionName
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.MxKnowledgeBaseConnection_Create");
		builder = builder.withParam("MxCloudKnowledgeBase", _mxCloudKnowledgeBase);
		builder = builder.withParam("CollectionName", _collectionName);
		return builder;
	}

	/**
	 * Creates a non-persistable connection that contains a configuration with the connection details for the MxCloudKnowledgeBase. This will be used as input for operations that perform knowledge base interactions. The CollectionName is the name of the collection for which the knowledge base interactions should happen.
	 * Note: the collection name cannot contain any whitespace.
	 */
	public static mxgenaiconnector.proxies.MxKnowledgeBaseConnection mxKnowledgeBaseConnection_Create(
		IContext context,
		mxgenaiconnector.proxies.MxCloudKnowledgeBase _mxCloudKnowledgeBase,
		java.lang.String _collectionName
	)
	{
		Object result = mxKnowledgeBaseConnection_CreateBuilder(
				_mxCloudKnowledgeBase,
				_collectionName
			)
			.execute(context);
		return result == null ? null : mxgenaiconnector.proxies.MxKnowledgeBaseConnection.initialize(context, (IMendixObject) result);
	}
	/**
	 * Opens the configuration overview page to view and edit configurations.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder nAV_ConfigurationOverview_OpenBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.NAV_ConfigurationOverview_Open");
		return builder;
	}

	/**
	 * Opens the configuration overview page to view and edit configurations.
	 */
	public static void nAV_ConfigurationOverview_Open(IContext context)
	{
		nAV_ConfigurationOverview_OpenBuilder().execute(context);
	}
	/**
	 * This action can be used to add an optional tool for Retrieve and Generate. If the Request is passed to the chat completions operation, the model can call this tool to retrieve data from the knowledge base and use it to generate a response. This works for with and without history cases. Multiple tools can be added at once (e.g., for different knowledge bases).
	 * 
	 * If an error occurs, it gets logged and the return object is empty.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder request_AddKnowledgeBaseToolBuilder(
		genaicommons.proxies.Request _request,
		mxgenaiconnector.proxies.MxCloudKnowledgeBase _mxCloudKnowledgeBase,
		java.lang.String _collectionName,
		java.lang.Long _maxNumberOfResults,
		java.math.BigDecimal _minimumSimilarity,
		genaicommons.proxies.MetadataCollection _metadataCollection,
		java.lang.String _name,
		java.lang.String _description
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("MxGenAIConnector.Request_AddKnowledgeBaseTool");
		builder = builder.withParam("Request", _request);
		builder = builder.withParam("MxCloudKnowledgeBase", _mxCloudKnowledgeBase);
		builder = builder.withParam("CollectionName", _collectionName);
		builder = builder.withParam("MaxNumberOfResults", _maxNumberOfResults);
		builder = builder.withParam("MinimumSimilarity", _minimumSimilarity);
		builder = builder.withParam("MetadataCollection", _metadataCollection);
		builder = builder.withParam("Name", _name);
		builder = builder.withParam("Description", _description);
		return builder;
	}

	/**
	 * This action can be used to add an optional tool for Retrieve and Generate. If the Request is passed to the chat completions operation, the model can call this tool to retrieve data from the knowledge base and use it to generate a response. This works for with and without history cases. Multiple tools can be added at once (e.g., for different knowledge bases).
	 * 
	 * If an error occurs, it gets logged and the return object is empty.
	 */
	public static genaicommons.proxies.KnowledgeBaseRetrieval request_AddKnowledgeBaseTool(
		IContext context,
		genaicommons.proxies.Request _request,
		mxgenaiconnector.proxies.MxCloudKnowledgeBase _mxCloudKnowledgeBase,
		java.lang.String _collectionName,
		java.lang.Long _maxNumberOfResults,
		java.math.BigDecimal _minimumSimilarity,
		genaicommons.proxies.MetadataCollection _metadataCollection,
		java.lang.String _name,
		java.lang.String _description
	)
	{
		Object result = request_AddKnowledgeBaseToolBuilder(
				_request,
				_mxCloudKnowledgeBase,
				_collectionName,
				_maxNumberOfResults,
				_minimumSimilarity,
				_metadataCollection,
				_name,
				_description
			)
			.execute(context);
		return result == null ? null : genaicommons.proxies.KnowledgeBaseRetrieval.initialize(context, (IMendixObject) result);
	}
}
