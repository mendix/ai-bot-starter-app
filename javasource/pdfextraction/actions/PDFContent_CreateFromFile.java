// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package pdfextraction.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import java.io.IOException;
import java.io.InputStream;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDDocumentInformation;
import org.apache.pdfbox.text.PDFTextStripper;
import pdfextraction.proxies.PDFContent;
import pdfextraction.impl.MxLogger;
import system.proxies.FileDocument;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Reads the content and meta data of a PDF file. The output object "PDFContent" contains that data.
 */
public class PDFContent_CreateFromFile extends UserAction<IMendixObject>
{
	/** @deprecated use Document.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Document;
	private final system.proxies.FileDocument Document;

	public PDFContent_CreateFromFile(
		IContext context,
		IMendixObject _document
	)
	{
		super(context);
		this.__Document = _document;
		this.Document = _document == null ? null : system.proxies.FileDocument.initialize(getContext(), _document);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			if (Document == null || !Document.getHasContents()) {
				throw new IllegalArgumentException("File contents are required.");
			}
			
			if(!isPDFFile(Document)) {
				throw new IllegalArgumentException("Only PDF files can be passed.");
			}
			
			try(InputStream inputStream = Core.getFileDocumentContent(getContext(), Document.getMendixObject());
					PDDocument pdfdocument = PDDocument.load(inputStream);){
				return extractPDFContent(pdfdocument).getMendixObject();
			}
			
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PDFContent_CreateFromFile";
	}

	// BEGIN EXTRA CODE
		private static final MxLogger LOGGER = new MxLogger(PDFContent_CreateFromFile.class);
		
		private boolean isPDFFile(FileDocument document) {
			return document.getName() != null && document.getName().toLowerCase().endsWith(".pdf");
		}
		
		private PDFContent extractPDFContent(PDDocument pdfdocument) throws IOException  {
			PDDocumentInformation pdfMetaData = pdfdocument.getDocumentInformation();
			
			//Populate output object with PDF data
			PDFContent pdfContent = new PDFContent(getContext());
			if(pdfMetaData != null)	{
				pdfContent.setAuthor(pdfMetaData.getAuthor());
				pdfContent.setKeywords(pdfMetaData.getKeywords());
				pdfContent.setTitle(pdfMetaData.getTitle());
				pdfContent.setSubject(pdfMetaData.getSubject());
				pdfContent.setModificationDate(pdfMetaData.getModificationDate() == null ? null : pdfMetaData.getModificationDate().getTime());
			}
			
			PDFTextStripper pdfTextStripper = new PDFTextStripper();
			pdfContent.setContent(pdfTextStripper.getText(pdfdocument));
			pdfContent.setFileName(Document.getName());
			
			return pdfContent;
		}
	// END EXTRA CODE
}
