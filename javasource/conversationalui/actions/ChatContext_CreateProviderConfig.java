// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package conversationalui.actions;

import static java.util.Objects.requireNonNull;
import java.util.List;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import conversationalui.impl.MxLogger;
import conversationalui.impl.ProviderConfigImpl;
import conversationalui.proxies.ProviderConfig;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Adds a new ProviderConfig (or a specialization of such depending on the input entity parameter) to the ChatContext. The passed DeployedModel will be associated to it. The ProviderConfig is set to active/selected only if IsActive is set to "true". In any case, the specified SystemPrompt and ActionMicroflow will be set on the new ProviderConfig.
 */
public class ChatContext_CreateProviderConfig extends UserAction<IMendixObject>
{
	/** @deprecated use ChatContext.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __ChatContext;
	private final conversationalui.proxies.ChatContext ChatContext;
	/** @deprecated use DeployedModel.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __DeployedModel;
	private final genaicommons.proxies.DeployedModel DeployedModel;
	private final java.lang.String ProviderConfigSpecialization;
	private final java.lang.String ActionMicroflow;
	private final java.lang.Boolean IsActive;
	private final java.lang.String ProviderName;
	private final java.lang.String SystemPrompt;

	public ChatContext_CreateProviderConfig(
		IContext context,
		IMendixObject _chatContext,
		IMendixObject _deployedModel,
		java.lang.String _providerConfigSpecialization,
		java.lang.String _actionMicroflow,
		java.lang.Boolean _isActive,
		java.lang.String _providerName,
		java.lang.String _systemPrompt
	)
	{
		super(context);
		this.__ChatContext = _chatContext;
		this.ChatContext = _chatContext == null ? null : conversationalui.proxies.ChatContext.initialize(getContext(), _chatContext);
		this.__DeployedModel = _deployedModel;
		this.DeployedModel = _deployedModel == null ? null : genaicommons.proxies.DeployedModel.initialize(getContext(), _deployedModel);
		this.ProviderConfigSpecialization = _providerConfigSpecialization;
		this.ActionMicroflow = _actionMicroflow;
		this.IsActive = _isActive;
		this.ProviderName = _providerName;
		this.SystemPrompt = _systemPrompt;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		try {
		    requireNonNull(ActionMicroflow, "ActionMicroflow is required.");
		    requireNonNull(ChatContext, "ChatContext is required.");
		    requireNonNull(DeployedModel, "DeployedModel is required.");
		    ProviderConfigImpl.validateActionMicroflow(ActionMicroflow);

		    ProviderConfig providerConfig = ProviderConfigImpl.createAndSetProviderConfigSpecialization(getContext(), ProviderConfigSpecialization, ActionMicroflow, ProviderName, DeployedModel, SystemPrompt);

		    updateProviderConfigOnChatContext(providerConfig);
		    
		    return providerConfig.getMendixObject();

		} catch (Exception e) {
		    LOGGER.error(e);
		    return null;
		}
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ChatContext_CreateProviderConfig";
	}

	// BEGIN EXTRA CODE
	
	private static final MxLogger LOGGER = new MxLogger(ChatContext_CreateProviderConfig.class);
	
	private void updateProviderConfigOnChatContext(ProviderConfig providerConfig) throws CoreException {
		List <ProviderConfig> providerConfigList = ChatContext.getChatContext_ProviderConfig();
		providerConfigList.add(providerConfig);
		ChatContext.setChatContext_ProviderConfig(providerConfigList);
		if (IsActive) {
			ChatContext.setChatContext_ProviderConfig_Active(providerConfig);
		}
	}
	
	// END EXTRA CODE
}
