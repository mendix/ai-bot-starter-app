// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package conversationalui.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import conversationalui.impl.MxLogger;
import conversationalui.proxies.PromptToUse;
import genaicommons.proxies.DeployedModel;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * This action is a combination of 'Get Prompt' and 'New Chat'.
 * First the variables in the prompt are replaced with attributes from the ContextObject to get the final system prompt. Then a new chat context is created with a provider config that is associated to a deployed model. Additionally, the system prompt is set based on the Prompt and the action microflow of the new provider config is set.
 * 
 * If an internal error occurs, the operation will return empty and the error is logged.
 */
public class ChatContext_Create_ForPrompt extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use OverwritingDeployedModel.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __OverwritingDeployedModel;
	private final genaicommons.proxies.DeployedModel OverwritingDeployedModel;
	private final java.lang.String ActionMicroflow;
	/** @deprecated use Prompt.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Prompt;
	private final conversationalui.proxies.Prompt Prompt;
	private final IMendixObject ContextObject;

	public ChatContext_Create_ForPrompt(
		IContext context,
		IMendixObject _overwritingDeployedModel,
		java.lang.String _actionMicroflow,
		IMendixObject _prompt,
		IMendixObject _contextObject
	)
	{
		super(context);
		this.__OverwritingDeployedModel = _overwritingDeployedModel;
		this.OverwritingDeployedModel = _overwritingDeployedModel == null ? null : genaicommons.proxies.DeployedModel.initialize(getContext(), _overwritingDeployedModel);
		this.ActionMicroflow = _actionMicroflow;
		this.__Prompt = _prompt;
		this.Prompt = _prompt == null ? null : conversationalui.proxies.Prompt.initialize(getContext(), _prompt);
		this.ContextObject = _contextObject;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		try {
		    requireNonNull(Prompt, "Prompt is required.");
		    DeployedModel deployedModel = OverwritingDeployedModel != null ? OverwritingDeployedModel : Prompt.getPrompt_DeployedModel();
		    requireNonNull(deployedModel, "No DeployedModel could be used for creating the ChatContext. Either pass the OverwritingDeployedModel or make sure to use a Prompt that has a DeployedModel associated.");
		    
		    IMendixObject returnValue = Core.userActionCall("ConversationalUI." + PromptToUse_GetAndReplace.class.getSimpleName())
		    		.withParams(Prompt.getMendixObject(), ContextObject)
		    		.execute(getContext());
		    if (returnValue == null) {
		    	return null;
		    }
		    
		    PromptToUse promptToUse = PromptToUse.initialize(getContext(), returnValue);
		    return Core.userActionCall("ConversationalUI." + ChatContext_Create_SetActionMicroflow.class.getSimpleName())
		    		.withParams(deployedModel.getMendixObject(), ActionMicroflow, promptToUse.getSystemPrompt(), Prompt.getTitle())
		    		.execute(getContext());

		} catch (Exception e) {
		    LOGGER.error(e);
		    return null;
		}
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ChatContext_Create_ForPrompt";
	}

	// BEGIN EXTRA CODE
	
	private static final MxLogger LOGGER = new MxLogger(ChatContext_Create_ForPrompt.class);
	
	// END EXTRA CODE
}
