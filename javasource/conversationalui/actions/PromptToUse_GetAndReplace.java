// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package conversationalui.actions;

import static java.util.Objects.requireNonNull;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import conversationalui.impl.MxLogger;
import conversationalui.proxies.Prompt;
import conversationalui.proxies.PromptToUse;
import conversationalui.proxies.Version;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Use this action to get a PromptInUse based on a prompt that was configured in the app. If you pass a context object, all variables that match the prompt's variables are replaced with the actual values extracted from the attributes with the exact same name as a variable. String, integer/long, decimal, date time, boolean and enum attribute types are supported. Note that for ENUM attributes the key will be used to replace a variable. To ensure a fixed format (for other types than string), it is recommended to convert values to type string first and only pass string attributes for value replacement.
 * 
 * 
 * Output:
 * -PromptToUse: object that contains the system and user prompt which you can use to pass the prompts to the request and operations.
 */
public class PromptToUse_GetAndReplace extends UserAction<IMendixObject>
{
	/** @deprecated use Prompt.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Prompt;
	private final conversationalui.proxies.Prompt Prompt;
	private final IMendixObject ContextObject;

	public PromptToUse_GetAndReplace(
		IContext context,
		IMendixObject _prompt,
		IMendixObject _contextObject
	)
	{
		super(context);
		this.__Prompt = _prompt;
		this.Prompt = _prompt == null ? null : conversationalui.proxies.Prompt.initialize(getContext(), _prompt);
		this.ContextObject = _contextObject;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(Prompt, "Prompt is required.");

			// get Version In Use (alternatively Draft) and set values
			
			Version versionInUse = Prompt.getPrompt_Version_InUse();
			requireNonNull(versionInUse, "No version marked as 'In Use' was found, so no PromptInUse can be created.");

			PromptToUse promptToUse = createPromptToUse(versionInUse);

			// if a VariablesObject was passed, replace the placeholders with actual values.
			if (ContextObject != null) {
				applyVariables(promptToUse, versionInUse, ContextObject);
			}

			return promptToUse.getMendixObject();

		} catch (Exception e) {
			LOGGER.error(e);
			return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "PromptToUse_GetAndReplace";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(PromptToUse_GetAndReplace.class);

	private void applyVariables(PromptToUse promptToUse, Version versionInUse, IMendixObject variablesObject)
			throws CoreException {
		
		// Get Prompt
		Prompt prompt = versionInUse.getVersion_Prompt(getContext());

		requireNonNull(prompt, "Cannot replace variables for the Version, as it has no Prompt linked");

		// Check if Entity name is not empty)
		if (prompt.getEntity() == null || prompt.getEntity().isBlank()) {
			throw new IllegalArgumentException(
					"Cannot replace variables: no Variables Entity is configured for this Prompt.");
		}

		// Check if entity matches the passed object's entity
		if (!variablesObject.getMetaObject().getName().equals(prompt.getEntity())) {
			throw new IllegalArgumentException(
					"Cannot replace variables for the passed VariablesObject because it does not match the Variables Entity that was configured for this Prompt."
							+ " Passed object's entity: " + ContextObject.getMetaObject().getName() + ", expected: "
							+ prompt.getEntity());
		}

		// Get all variables associated to the Prompt and replace placeholders with
		// values from attributes.
		List<IMendixObject> variableList = Core.retrieveByPath(getContext(), prompt.getMendixObject(),
				"ConversationalUI.Variable_Prompt");

		// Replacement of variables if they are found in the passed object

		for (IMendixObject variable : variableList) {
			applyVariable(promptToUse, variablesObject, variable);

		}
	}

	private void applyVariable(PromptToUse promptToUse, IMendixObject variablesObject, IMendixObject variable) {

		String variableKey = conversationalui.proxies.Variable.initialize(getContext(), variable).getKey(getContext());
		// Check variable key is not empty
		if (variableKey == null || variableKey.isBlank()) {
			LOGGER.warn("Skipping variable with empty Key attribute");
			return;
		}
		// Check variable is attribute of passed object
		if (!variablesObject.hasMember(variableKey)) {
			LOGGER.warn(
					"Cannot replace variable {{" + variableKey + "}} because it is not found in the passed object.");
			replaceVariable(promptToUse, variableKey, "");
			return;
		}
		// Check value is not empty
		if (variablesObject.getValue(getContext(), variableKey) == null) {
			LOGGER.warn("Cannot replace variable {{" + variableKey + "}} because it is empty in the passed object.");
			replaceVariable(promptToUse, variableKey, "");
			return;
		}
		// Apply variable
		replaceVariable(promptToUse, variableKey, variablesObject.getValue(getContext(), variableKey).toString());
	}

	private void replaceVariable(PromptToUse promptToUse, String variableKey, String value) {
		conversationalui.proxies.microflows.Microflows.promptToUse_ApplyVariable(getContext(), promptToUse, variableKey,
				value);
	}

	private PromptToUse createPromptToUse(Version versionInUse) {
		PromptToUse promptToUse = new PromptToUse(getContext());

		promptToUse.setPromptToUse_Version(versionInUse);
		promptToUse.setSystemPrompt(versionInUse.getSystemPrompt());
		promptToUse.setUserPrompt(versionInUse.getUserPrompt());

		return promptToUse;
	}
	// END EXTRA CODE
}
