// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package conversationalui.actions;

import static java.util.Objects.requireNonNull;
import java.util.LinkedList;
import java.util.List;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import conversationalui.impl.MxLogger;
import conversationalui.impl.ProviderConfigImpl;
import conversationalui.proxies.ChatContext;
import conversationalui.proxies.ENUM_ChatContextStatus;
import conversationalui.proxies.ProviderConfig;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Creates a new chat context and a new provider config (or a specialization of such depending on the input). The provider config is added to the chat context and set to active. Additionally the action microflow of the new provider config is set.
 */
public class ChatContext_Create_SetActionMicroflow extends CustomJavaAction<IMendixObject>
{
	private final java.lang.String ProviderConfigSpecialization;
	private final java.lang.String ActionMicroflow;
	private final java.lang.String ProviderName;

	public ChatContext_Create_SetActionMicroflow(
		IContext context,
		java.lang.String _providerConfigSpecialization,
		java.lang.String _actionMicroflow,
		java.lang.String _providerName
	)
	{
		super(context);
		this.ProviderConfigSpecialization = _providerConfigSpecialization;
		this.ActionMicroflow = _actionMicroflow;
		this.ProviderName = _providerName;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		try {
		    requireNonNull(ActionMicroflow, "ActionMicroflow is required.");
		    ProviderConfigImpl.validateActionMicroflow(ActionMicroflow);

		    ProviderConfig providerConfig = ProviderConfigImpl.createAndSetProviderConfigSpecialization(getContext(), ProviderConfigSpecialization, ActionMicroflow, ProviderName);

		    return createAndSetChatContext(providerConfig).getMendixObject();

		} catch (Exception e) {
		    LOGGER.error(e.getMessage());
		    throw e;
		}
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ChatContext_Create_SetActionMicroflow";
	}

	// BEGIN EXTRA CODE
	
	private static final MxLogger LOGGER = new MxLogger(ChatContext_Create_SetActionMicroflow.class);
	
	private ChatContext createAndSetChatContext(ProviderConfig providerConfig) {
		// Create ChatContext and set attributes and associations
		ChatContext chatContext = new ChatContext(getContext());
		chatContext.setStatus(ENUM_ChatContextStatus.Ready);
		chatContext.setChatContext_ProviderConfig_Active(providerConfig);

		//Add to ProviderConfigList
		List<ProviderConfig> providerConfigList = new LinkedList<>();
		providerConfigList.add(providerConfig);
		chatContext.setChatContext_ProviderConfig(providerConfigList);
		return chatContext;
	}
	
	// END EXTRA CODE
}
