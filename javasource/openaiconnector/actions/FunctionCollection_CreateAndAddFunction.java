// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package openaiconnector.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import openaiconnector.impl.MxLogger;
import openaiconnector.impl.FunctionImpl;
import openaiconnector.proxies.Function;
import openaiconnector.proxies.FunctionCollection;
import openaiconnector.impl.FunctionCollectionImpl;

/**
 * Initialize a FunctionCollection and add a Function to it.
 * Returns the new FunctionCollection.
 * 
 * Parameters: 
 * - FunctionName: The name of the function to call.
 * - FunctionMicroflow: The microflow that is called within this function.
 * - FunctionDescription (optional): A description of what the function does, used by the model to choose when and how to call the function.
 * - ToolChoice: Controls which (if any) function is called by the model.
 * `none` means the model will not call a function and instead generates a message.
 * `auto` means the model can pick between generating a message or calling a function.
 * `function` means that the new function will become the tool choice of the FunctionCollection. This will force the model to call that particular function.
 * `auto` is the default if functions are present.
 */
public class FunctionCollection_CreateAndAddFunction extends CustomJavaAction<IMendixObject>
{
	private java.lang.String FunctionName;
	private java.lang.String FunctionMicroflow;
	private java.lang.String FunctionDescription;
	private openaiconnector.proxies.ENUM_ToolChoice ToolChoice;

	public FunctionCollection_CreateAndAddFunction(IContext context, java.lang.String FunctionName, java.lang.String FunctionMicroflow, java.lang.String FunctionDescription, java.lang.String ToolChoice)
	{
		super(context);
		this.FunctionName = FunctionName;
		this.FunctionMicroflow = FunctionMicroflow;
		this.FunctionDescription = FunctionDescription;
		this.ToolChoice = ToolChoice == null ? null : openaiconnector.proxies.ENUM_ToolChoice.valueOf(ToolChoice);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try{
			FunctionImpl.validateInput(FunctionMicroflow, FunctionName);
			
			FunctionCollection functionCollection = new FunctionCollection(getContext());
			
			Function function = FunctionImpl.createFunction(getContext(), FunctionMicroflow, FunctionName, FunctionDescription, functionCollection);		
			
			FunctionCollectionImpl.setToolChoice(functionCollection, ToolChoice, function);
			
			return functionCollection.getMendixObject();
		
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "FunctionCollection_CreateAndAddFunction";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(FunctionCollection_CreateAndAddFunction.class);
	// END EXTRA CODE
}
