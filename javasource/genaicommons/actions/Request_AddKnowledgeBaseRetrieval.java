// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import static java.util.Objects.requireNonNull;
import java.math.BigDecimal;
import java.util.List;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import genaicommons.impl.FunctionImpl;
import genaicommons.impl.MxLogger;
import genaicommons.impl.ToolCollectionImpl;
import genaicommons.proxies.Connection;
import genaicommons.proxies.KnowledgeBaseRetrieval;
import genaicommons.proxies.MetadataCollection;
import genaicommons.proxies.Tool;
import genaicommons.proxies.ToolCollection;
import com.mendix.systemwideinterfaces.core.UserAction;

public class Request_AddKnowledgeBaseRetrieval extends UserAction<IMendixObject>
{
	/** @deprecated use Request.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Request;
	private final genaicommons.proxies.Request Request;
	private final java.lang.String ToolName;
	private final java.lang.String RetrieveMicroflow;
	/** @deprecated use Connection.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Connection;
	private final genaicommons.proxies.Connection Connection;
	private final java.lang.String ToolDescription;
	/** @deprecated use MetadataCollection.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __MetadataCollection;
	private final genaicommons.proxies.MetadataCollection MetadataCollection;
	private final java.math.BigDecimal MinimumSimilarity;
	private final java.lang.Long MaxNumberOfResults;

	public Request_AddKnowledgeBaseRetrieval(
		IContext context,
		IMendixObject _request,
		java.lang.String _toolName,
		java.lang.String _retrieveMicroflow,
		IMendixObject _connection,
		java.lang.String _toolDescription,
		IMendixObject _metadataCollection,
		java.math.BigDecimal _minimumSimilarity,
		java.lang.Long _maxNumberOfResults
	)
	{
		super(context);
		this.__Request = _request;
		this.Request = _request == null ? null : genaicommons.proxies.Request.initialize(getContext(), _request);
		this.ToolName = _toolName;
		this.RetrieveMicroflow = _retrieveMicroflow;
		this.__Connection = _connection;
		this.Connection = _connection == null ? null : genaicommons.proxies.Connection.initialize(getContext(), _connection);
		this.ToolDescription = _toolDescription;
		this.__MetadataCollection = _metadataCollection;
		this.MetadataCollection = _metadataCollection == null ? null : genaicommons.proxies.MetadataCollection.initialize(getContext(), _metadataCollection);
		this.MinimumSimilarity = _minimumSimilarity;
		this.MaxNumberOfResults = _maxNumberOfResults;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try{
			requireNonNull(Request, "Request is required.");
			validateInput(RetrieveMicroflow, ToolName);
			validateOptionalInput(MetadataCollection, MinimumSimilarity, MaxNumberOfResults);
			
			ToolCollection toolCollection = ToolCollectionImpl.getOrCreateToolCollection(getContext(), Request);
			
			IMendixObject knowledgeBaseRetrievalMxObject = createKnowledgeBaseRetrieval(getContext(), RetrieveMicroflow, ToolName, toolCollection, Connection).getMendixObject();
			KnowledgeBaseRetrieval knowledgeBaseRetrieval = KnowledgeBaseRetrieval.load(getContext(), knowledgeBaseRetrievalMxObject.getId());
			addOptionalParameters(knowledgeBaseRetrieval, ToolDescription, MetadataCollection, MinimumSimilarity, MaxNumberOfResults);
			
			return knowledgeBaseRetrievalMxObject;
			
		} catch (Exception e) {
			LOGGER.error(e);
			return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Request_AddKnowledgeBaseRetrieval";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new genaicommons.impl.MxLogger(Request_AddKnowledgeBaseRetrieval.class);
	
	private static void validateInput(String microflow, String toolName) throws Exception{
		requireNonNull(toolName, "Tool Name is required.");
		if(!microflow.isBlank()) {
			FunctionImpl.validateFunctionMicroflow(microflow);
		}
	}
	
	private static void validateOptionalInput(MetadataCollection metadataCollection, BigDecimal minimumSimilarity, Long maxNumberOfResults) throws CoreException {
		if(metadataCollection != null && metadataCollection.getMetadataCollection_Metadata().size() == 0) {
			throw new IllegalArgumentException("MetadataCollection was added without any meta data.");
		}
		if(minimumSimilarity != null && (minimumSimilarity.doubleValue() < 0 || minimumSimilarity.doubleValue() > 1)) {
			throw new IllegalArgumentException("MinimumSimilarity value was " + minimumSimilarity +", but is only valid for values from 0.0 to 1.0.");
		}
		if(maxNumberOfResults != null && maxNumberOfResults <= 0) {
			throw new IllegalArgumentException("MaxNumberOfResults value was " + maxNumberOfResults +", but is only valid for values greater than 0.");
		}
	}
	
	private static KnowledgeBaseRetrieval createKnowledgeBaseRetrieval(IContext context, String microflow, String name, ToolCollection toolCollection, Connection connection) throws CoreException {
		KnowledgeBaseRetrieval knowledgeBaseRetrieval = new KnowledgeBaseRetrieval(context);
		knowledgeBaseRetrieval.setMicroflow(microflow);
		knowledgeBaseRetrieval.setName(name);	
		knowledgeBaseRetrieval.setKnowledgeBaseRetrieval_Connection(connection);
		List<Tool> ToolList = toolCollection.getToolCollection_Tool();
		ToolList.add(knowledgeBaseRetrieval);
		toolCollection.setToolCollection_Tool(ToolList); 
		return knowledgeBaseRetrieval;
	}
	
	private static void addOptionalParameters(KnowledgeBaseRetrieval knowledgeBaseRetrieval, String description, MetadataCollection metadataCollection, BigDecimal minimumSimilarity, Long maxNumberOfResults) {
		knowledgeBaseRetrieval.setDescription(description);
		knowledgeBaseRetrieval.setKnowledgeBaseRetrieval_MetadataCollection(metadataCollection);
		knowledgeBaseRetrieval.setMinimumSimilarity(minimumSimilarity);
		if(maxNumberOfResults != null) {
			knowledgeBaseRetrieval.setMaxNumberOfResults(maxNumberOfResults.intValue());
		}
	}
	// END EXTRA CODE
}
