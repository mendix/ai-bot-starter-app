// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package genaicommons.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import genaicommons.impl.DeployedModelImpl;
import genaicommons.impl.MxLogger;
import genaicommons.proxies.DeployedModel;
import genaicommons.proxies.ENUM_ModelModality;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Creates a DeployedModel object (or a specialization of such if the specialization is passed) and sets all passed attributes. The DeployedModel entity replaces the Connection entity and is a required input parameter for all chat completion operations. It contains the name of the microflow to be executed for the specified model and other information relevant to connect to a model.
 */
public class DeployedModel_Create extends UserAction<IMendixObject>
{
	private final java.lang.String DisplayName;
	private final java.lang.String Architecture;
	private final java.lang.String Model;
	private final genaicommons.proxies.ENUM_ModelModality OutputModality;
	private final java.lang.String Microflow;
	private final java.lang.String DeployedModelSpecialization;
	/** @deprecated use com.mendix.utils.ListUtils.map(InputModalityList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __InputModalityList;
	private final java.util.List<genaicommons.proxies.InputModality> InputModalityList;
	private final genaicommons.proxies.ENUM_ModelSupport SupportsSystemPrompt;
	private final genaicommons.proxies.ENUM_ModelSupport SupportsFunctionCalling;
	private final genaicommons.proxies.ENUM_ModelSupport SupportsConversationsWithHistory;

	public DeployedModel_Create(
		IContext context,
		java.lang.String _displayName,
		java.lang.String _architecture,
		java.lang.String _model,
		java.lang.String _outputModality,
		java.lang.String _microflow,
		java.lang.String _deployedModelSpecialization,
		java.util.List<IMendixObject> _inputModalityList,
		java.lang.String _supportsSystemPrompt,
		java.lang.String _supportsFunctionCalling,
		java.lang.String _supportsConversationsWithHistory
	)
	{
		super(context);
		this.DisplayName = _displayName;
		this.Architecture = _architecture;
		this.Model = _model;
		this.OutputModality = _outputModality == null ? null : genaicommons.proxies.ENUM_ModelModality.valueOf(_outputModality);
		this.Microflow = _microflow;
		this.DeployedModelSpecialization = _deployedModelSpecialization;
		this.__InputModalityList = _inputModalityList;
		this.InputModalityList = java.util.Optional.ofNullable(_inputModalityList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(inputModalityListElement -> genaicommons.proxies.InputModality.initialize(getContext(), inputModalityListElement))
			.collect(java.util.stream.Collectors.toList());
		this.SupportsSystemPrompt = _supportsSystemPrompt == null ? null : genaicommons.proxies.ENUM_ModelSupport.valueOf(_supportsSystemPrompt);
		this.SupportsFunctionCalling = _supportsFunctionCalling == null ? null : genaicommons.proxies.ENUM_ModelSupport.valueOf(_supportsFunctionCalling);
		this.SupportsConversationsWithHistory = _supportsConversationsWithHistory == null ? null : genaicommons.proxies.ENUM_ModelSupport.valueOf(_supportsConversationsWithHistory);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			if (OutputModality != null)
				DeployedModelImpl.validateMicroflow(Microflow, OutputModality);
			
			return createAndSetDeployedModel().getMendixObject();
			
		} catch (Exception e) {
			LOGGER.error(e);
			return null;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeployedModel_Create";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(DeployedModel_Create.class);
	
	private DeployedModel createAndSetDeployedModel() {
		// Create an instance of the specialized ProviderConfig object
		IMendixObject deployedModelSpecialization = createDeployedModel();
		validateDeployedModelSpecialization(deployedModelSpecialization);

		// Use the specialized proxy class to wrap the generic IMendixObject to set attributes
		DeployedModel deployedModel = DeployedModel.initialize(getContext(), deployedModelSpecialization);
		deployedModel.setArchitecture(Architecture);
		deployedModel.setMicroflow(Microflow);
		deployedModel.setDisplayName(DisplayName);
		deployedModel.setModel(Model);
		deployedModel.setOutputModality(OutputModality);
		deployedModel.setDeployedModel_InputModality(InputModalityList);
		if(OutputModality != null && OutputModality == ENUM_ModelModality.Text) {
			deployedModel.setSupportsConversationsWithHistory(SupportsConversationsWithHistory);
			deployedModel.setSupportsFunctionCalling(SupportsFunctionCalling);
			deployedModel.setSupportsSystemPrompt(SupportsSystemPrompt);
		}
		return deployedModel;
	}

	private IMendixObject createDeployedModel() {
		if (DeployedModelSpecialization != null && !DeployedModelSpecialization.isBlank()) {
			IMendixObject deployedModelSpecialization = Core.instantiate(getContext(), DeployedModelSpecialization);
			return deployedModelSpecialization;
		} else { // if no object is passed, then a GenAICOmmons.DeployedModel object is created
			DeployedModel deployedModel = new DeployedModel(getContext());
			return deployedModel.getMendixObject();
		}
	}
	
	private void validateDeployedModelSpecialization(IMendixObject deployedModelSpecialization) {
		if (!deployedModelSpecialization.isInstanceOf(DeployedModel.entityName)){	
			throw new IllegalArgumentException(DeployedModel.entityName + " or a specialization of such is required.");
		}
	}
	// END EXTRA CODE
}
