// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxgenaiconnector.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import mxgenaiconnector.impl.ConverseVisionDocument;
import mxgenaiconnector.impl.ConverseFunctionCalling;
import com.mendix.systemwideinterfaces.core.UserAction;

public class Request_Modify_Converse extends UserAction<java.lang.String>
{
	/** @deprecated use Request.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Request;
	private final genaicommons.proxies.Request Request;
	private final java.lang.String RequestBodyJSON;

	public Request_Modify_Converse(
		IContext context,
		IMendixObject _request,
		java.lang.String _requestBodyJSON
	)
	{
		super(context);
		this.__Request = _request;
		this.Request = _request == null ? null : genaicommons.proxies.Request.initialize(getContext(), _request);
		this.RequestBodyJSON = _requestBodyJSON;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(this.RequestBodyJSON, "RequestBody JSON is required");
			requireNonNull(this.Request, "Request object is required");
			ObjectNode rootNode = (ObjectNode) MAPPER.readTree(RequestBodyJSON);
			
			//System prompt node needs to be removed if empty
			removeSystemPromptIfEmpty(rootNode);
			//Add image for vision or ToolResults/ToolUse for function calling
			updateMessages(rootNode);
			//ToolConfig describes the available functions/tools to the model
			ConverseFunctionCalling.addToolConfig(rootNode);
			
			return MAPPER.writeValueAsString(rootNode);

		} catch (Exception e) {
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Request_Modify_Converse";
	}

	// BEGIN EXTRA CODE
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	
	private void updateMessages(ObjectNode rootNode)throws Exception {
		ArrayNode messagesNode = (ArrayNode) rootNode.path("messages");
		
		for (int i = 0; i < messagesNode.size(); i++) {
			//Map "tool" messages to Converse ToolResult
			ConverseFunctionCalling.mapToolResult(messagesNode, i, getContext(), Request);
			
            //If a fileCollection has been added, add a new Converse ContentBlock
            ConverseVisionDocument.mapFileCollection(messagesNode, i);
        }
		//Update messages of rootNode
		rootNode.set("messages", messagesNode);
	}
	
	

	//Removes system prompt node if empty (system prompt is not required, but can't be null)
	private void removeSystemPromptIfEmpty(ObjectNode rootNode) {
		if (rootNode.has("system")) {
            JsonNode systemNode = rootNode.get("system").get(0);
            if (systemNode != null && systemNode.size() == 0 || (systemNode.get("text") != null && systemNode.get("text").asText().isBlank())) {
                rootNode.remove("system");
            }
		}
	}
	// END EXTRA CODE
}
