// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxgenaiconnector.actions;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import static java.util.Objects.requireNonNull;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mendix.systemwideinterfaces.core.UserAction;

public class Response_ModifyForMapping_Converse extends UserAction<java.lang.String>
{
	private final java.lang.String ResponseJSON;

	public Response_ModifyForMapping_Converse(
		IContext context,
		java.lang.String _responseJSON
	)
	{
		super(context);
		this.ResponseJSON = _responseJSON;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(this.ResponseJSON, "Response JSON is required");
			ObjectNode rootNode = (ObjectNode) MAPPER.readTree(ResponseJSON);
			
			//Prepare JSON for Mendix ToolUse Objects (map the arguments)
			mapToolUse(rootNode);
			
			//Deal with internal reasoning text content message
			
			return MAPPER.writeValueAsString(rootNode);

		} catch (Exception e) {
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Response_ModifyForMapping_Converse";
	}

	// BEGIN EXTRA CODE
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	//Map ToolUse to mappable JSON that represents GenAICommons.ToolCall
	private void mapToolUse(ObjectNode rootNode) throws JsonProcessingException {
		JsonNode contentArray = rootNode.path("output").path("message").path("content");
		if (contentArray.isArray()) {
            for (JsonNode contentNode : contentArray) {
                JsonNode toolUseNode = contentNode.path("toolUse");
                if (toolUseNode != null && toolUseNode.isObject()) {
                	//Replace old "input" field by new "arguments" field to store the input as JSON string
                    ObjectNode toolUseObjectNode = (ObjectNode) toolUseNode;
                    JsonNode inputNode = toolUseObjectNode.remove("input");
                    String inputJsonString = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(inputNode);
                    toolUseObjectNode.put("arguments", inputJsonString);
                }
                else if (toolUseNode != null){
                	//Remove ToolUse if it is not an object
                	((ObjectNode) contentNode).remove("toolUse");
                }
            }
        }		
	}
	
	// END EXTRA CODE
}
