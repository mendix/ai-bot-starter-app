// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazonbedrockconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import amazonbedrockconnector.genaicommons_impl.FunctionMappingImpl;
import amazonbedrockconnector.genaicommons_impl.MessageImpl;
import amazonbedrockconnector.impl.MxLogger;
import amazonbedrockconnector.proxies.AnthropicClaudeRequest_Extension;
import amazonbedrockconnector.proxies.ENUM_MessageType_AnthropicClaude;
import genaicommons.proxies.ENUM_MessageRole;
import genaicommons.proxies.ENUM_ToolChoice;
import genaicommons.proxies.Message;
import genaicommons.proxies.Request;
import genaicommons.proxies.Tool;
import genaicommons.proxies.ToolCall;
import genaicommons.proxies.ToolCollection;

public class JA_AnthropicClaude_ModifyJson_Request extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String RequestBody_ToBeModified;
	/** @deprecated use MappingHelper.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __MappingHelper;
	private final amazonbedrockconnector.proxies.AnthropicClaudeMappingHelper MappingHelper;

	public JA_AnthropicClaude_ModifyJson_Request(
		IContext context,
		java.lang.String _requestBody_ToBeModified,
		IMendixObject _mappingHelper
	)
	{
		super(context);
		this.RequestBody_ToBeModified = _requestBody_ToBeModified;
		this.__MappingHelper = _mappingHelper;
		this.MappingHelper = _mappingHelper == null ? null : amazonbedrockconnector.proxies.AnthropicClaudeMappingHelper.initialize(getContext(), _mappingHelper);
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			requireNonNull(this.RequestBody_ToBeModified, "RequestBody String is required");
			requireNonNull(this.MappingHelper, "AnthropicClaudeMappingHelper is required");
			
			ObjectNode rootNode = (ObjectNode) MAPPER.readTree(RequestBody_ToBeModified);
			
			modifyMessageNodes(rootNode);
			modifyToolNode(rootNode);
			SetOrRemoveToolChoice(rootNode);
			
			LOGGER.debug("modified Json: " + rootNode);
			return MAPPER.writeValueAsString(rootNode);		
		} catch (Exception e) {
			LOGGER.error("Error occurred while modifying Claude request body: " + e.getMessage());
			throw e;
		}
		
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_AnthropicClaude_ModifyJson_Request";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(JA_AnthropicClaude_ModifyJson_Request.class);
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	private void modifyMessageNodes(ObjectNode rootNode) throws JsonMappingException, JsonProcessingException {
		// messages Node
		ArrayNode messagesNode = (ArrayNode) rootNode.get("messages");
		
		boolean requiresToolPostProcessing = false;
		
		for (JsonNode messageNode : messagesNode) {
			
			// Message Object 
			ObjectNode message = (ObjectNode) messageNode;
			
			// Case 1: ImageCollection with FileContent passed -> User wants to send an image to claude
			if (message.has("imageCollection")) {
				ArrayNode imageCollectionsNode = (ArrayNode) message.get("imageCollection");
				if (imageCollectionsNode.size() > 0) {
					
					// Get the content array for passing images
					ArrayNode newContentNode = getImageContentNode(imageCollectionsNode, message);
					
					// replacing content and removing obsolete fields
					replaceContent(newContentNode, message);
					cleanMessageNode(message);
					continue;
				}				
			}
			
			
			// Case 2: ToolCall(s) passed -> Claude wants to execute a tool, this is passed to history of the request
			if (message.has("toolCall")) {
				
				ArrayNode toolCallNode = (ArrayNode) message.get("toolCall");
				
				if (toolCallNode.size() > 0) {
					
					// Get the content array for the tool_use 
					ArrayNode newContentNode = getToolCallContentNode(toolCallNode, message);
					
					// replacing content and removing obsolete fields
					replaceContent(newContentNode, message); 
					cleanMessageNode(message);
					continue;			
				}
			}
			
			// Case 3: A requested tool was executed -> The result of the tool is sent to Claude
			if (message.has("toolCallId")) {
				String toolCallId = message.get("toolCallId").asText();
				if (toolCallId != null && !toolCallId.isBlank()) {
					
					// Get the content for the tool_result
					ArrayNode newContentNode = getToolResultContentNode(toolCallId, message);
					
					// A tool result message was added
					// Enable post processing
					// Claude needs all subsequent tool_results as part of a single message
					requiresToolPostProcessing = true;
					
					// replacing content and removing obsolete fields
					replaceContent(newContentNode, message);
					cleanMessageNode(message);
					continue;
				}
			}
			
			// Case: None of the above -> standard text message with content as field
			cleanMessageNode(message);
				
		}
		
		// Merging all subsequent tool_result messages into one
		if (requiresToolPostProcessing) {
			mergeUserToolResultContentMessages(messagesNode);
		}
		
	}
	
	private ArrayNode getImageContentNode(ArrayNode imageCollectionsNode, ObjectNode message) {
		
		ArrayNode newContentNode = MAPPER.createArrayNode();
		
		for (JsonNode imageCollectionNode : imageCollectionsNode) {
			
			// Add a the TextContent prior to the image
			if (imageCollectionNode.has("textContent")) {
				String textContent = imageCollectionNode.get("textContent").asText();
				if (textContent != null && !textContent.isBlank()) {
					addTextNode(textContent, newContentNode);
				}
			}	
			// transforming the ImageCollection into the correct format
			addImageNode(imageCollectionNode, newContentNode);
		}
		
		// If present, add the text content from the Message.Content attribute.	
		if (message.has("content")) {
			String messageContent = message.get("content").asText();
			if (messageContent != null && !messageContent.isBlank()) {
				addTextNode(messageContent, newContentNode);
			}
		}
		
		return newContentNode;
	}
	
	private ArrayNode getToolCallContentNode(ArrayNode toolCallNode, ObjectNode message) throws JsonMappingException, JsonProcessingException {
		ArrayNode newContentNode = MAPPER.createArrayNode();
		
		// If text content is present, this is added before the tool calls
		if (message.has("content")) {
			String textContent = message.get("content").asText();
			addTextNode(textContent, newContentNode);
		}
		
		// creating tool call objects in the format claude expects
		for (JsonNode toolCall : toolCallNode) {
			
			ObjectNode toolCall_formatted = MAPPER.createObjectNode();
			
			toolCall_formatted.put("type", "tool_use");
			
			String toolCallId = toolCall.get("id").asText();
			toolCall_formatted.put("id", toolCallId);
			
			String name = toolCall.get("name").asText();
			toolCall_formatted.put("name", name);
			
			String arguments = toolCall.get("arguments").asText();
			JsonNode input = MAPPER.readTree(arguments);
			toolCall_formatted.set("input", input);
			
			newContentNode.add(toolCall_formatted);
			
		}
		
		return newContentNode;
	}
	
	private ArrayNode getToolResultContentNode(String toolCallId, ObjectNode message) {
		ArrayNode newContentNode = MAPPER.createArrayNode();
		
		ObjectNode tool_result = MAPPER.createObjectNode();
		
		tool_result.put("type", "tool_result");
		tool_result.put("tool_use_id", toolCallId);
		
		// Claude sometimes requests wrong/no input arguments. 
		// This can be fixed most of the times by prompting to try again with correct attributes.
		String content  = "";
		if (message.has("content") && message.get("content") != null) {
			content = message.get("content").asText();
		} else {
			content = "Tool Call did not return any results.";
		}
		tool_result.put("content", content);
		
		newContentNode.add(tool_result);
		
		return newContentNode;
	}
	
	private void replaceContent(ArrayNode newContentNode, ObjectNode message) {
		message.remove("content");
		message.set("content", newContentNode);
	}
	
	private void cleanMessageNode(ObjectNode message) {
		message.remove("imageCollection");
		message.remove("toolCall");
		message.remove("toolCallId");
	}
	
	// This method looks for subsequent tool_result messages and combines them into one to match Claudes expected format
	// It calls recursively the AddFollowingToolResults method until no subsequent tool_result is found. 
	private void mergeUserToolResultContentMessages(ArrayNode messagesNode) {
		LOGGER.debug("merge method called");
		for (int i = 0; i < messagesNode.size(); i++) {	
			ObjectNode message = (ObjectNode) messagesNode.get(i);
			
			if (isToolResultNode(message)) {
				LOGGER.debug("ToolResult First message: " + message);
				ArrayNode messageContentToAlter = (ArrayNode) message.get("content");
				
				addFollowingToolResults(messagesNode, messageContentToAlter, i + 1);			
				LOGGER.debug("New MessageContent " + messageContentToAlter);
			}
			
		}
	}
	
	private boolean isToolResultNode(ObjectNode message) {
		if (message.get("role").asText().equals("user") &&
				message.has("content") && 
				message.get("content").isArray() &&
				message.get("content").get(0).has("type") &&
				message.get("content").get(0).get("type").asText().equals("tool_result")) {
			return true;
		}
		return false;
		
	}
	
	// If a subsequent tool_result message is found, its content is appended to the previous tool_result message
	// The subsequent tool_result message is removed
	// Then the next message is checked
	private void addFollowingToolResults(ArrayNode messagesNode, ArrayNode messageContentToAlter, int nextMessageIndex) {
		
		if (nextMessageIndex < messagesNode.size()) {
			
			ObjectNode nextMessage = (ObjectNode) messagesNode.get(nextMessageIndex);
			
			if (isToolResultNode(nextMessage)) {
				LOGGER.debug("ToolResult Next message found: " + nextMessage);
				ObjectNode nextMessageToolResult = (ObjectNode) nextMessage.get("content").get(0);
				messageContentToAlter.add(nextMessageToolResult);
				messagesNode.remove(nextMessageIndex);
				addFollowingToolResults(messagesNode, messageContentToAlter, nextMessageIndex);
			}
			
		}		
	}
	
	private void addTextNode(String text, ArrayNode contentNode) {
		ObjectNode newTextNode = MAPPER.createObjectNode();
		newTextNode.put("type", ENUM_MessageType_AnthropicClaude.text.toString());
		newTextNode.put("text", text);
		
		contentNode.add(newTextNode);
	}
	
	private void addImageNode(JsonNode imageCollectionNode, ArrayNode contentNode) {
		ObjectNode newImageNode = MAPPER.createObjectNode();
		newImageNode.put("type", ENUM_MessageType_AnthropicClaude.image.toString());
		ObjectNode sourceNode = MAPPER.createObjectNode();
		sourceNode.put("type", "base64");
		sourceNode.put("media_type", getAttributeFromNode(imageCollectionNode,"mediaType"));
		sourceNode.put("data", getAttributeFromNode(imageCollectionNode,"fileContent"));
		newImageNode.set("source", sourceNode);
		
		contentNode.add(newImageNode);
	}
	
	private String getAttributeFromNode(JsonNode node, String attributeName) {
		if(!node.has(attributeName)) {
			LOGGER.error("Request FileContent is missing required attribute: " + attributeName);
			throw new IllegalArgumentException("Request FileContent is missing required attribute: " + attributeName);
		}
		String value = node.get(attributeName).asText();
		if (value.equals("image/jpg")) {
			value = "image/jpeg";
		}
		
		return value;
		
	}
	
	private void modifyToolNode(ObjectNode rootNode) {
		if (rootNode.has("tools")) {
			
			ArrayNode toolNode = (ArrayNode) rootNode.get("tools");
			
			for (JsonNode t : toolNode) {
				ObjectNode tool = (ObjectNode) t;
				
				String mfName = tool.get("microflowName").asText();
				ObjectNode inputSchemaNode = createFunctionParametersNode(mfName, MAPPER);
				
				tool.set("input_schema", inputSchemaNode);
				tool.remove("microflowName");
			}			
		}
	}
	
	private void SetOrRemoveToolChoice(ObjectNode rootNode) throws Exception {
		// ToolChoice is not function and thus empty or auto. 'any' and 'none' will be mapped to empty
		if (MappingHelper.getToolChoice() == null || !MappingHelper.getToolChoice().equals(ENUM_ToolChoice.tool)) {
			return;

		// Add ToolChoice Tool if it has not yet been called in a previous iteration
		} else if (getToolCollection() != null) {
			Tool toolChoiceTool = getToolCollection().getToolCollection_ToolChoice();
			
			// Remove tool choice function, because it has already been called
			// This prevents and infinite loop
			if (toolChoiceTool == null || isToolRecall(toolChoiceTool)) {
				LOGGER.debug("ToolChoice " + toolChoiceTool.getName() + " has already been called. Removing ToolChoice from Request.");
				((ObjectNode)rootNode).remove("tool_choice");
			
			} else {
				// Create a new tool_choice node
		        ObjectNode toolChoiceNode = createToolChoiceNode(toolChoiceTool);
		        LOGGER.debug("ToolChoice has not been called yet. Updating ToolChoice function placeholder with: " + toolChoiceNode);
		        
		        // Update the original JsonNode with the tool_choice object
		        ((ObjectNode) rootNode).set("tool_choice", toolChoiceNode);
			}
		}
	}
	
	private ToolCollection getToolCollection() throws CoreException {
		Request request = getRequest();
		if (request == null) {
			return null;
		}
		return request.getRequest_ToolCollection();
	}
	
	private Request getRequest( ) throws CoreException {
		if (MappingHelper.getAnthropicClaudeMappingHelper_AnthropicClaudeRequest_Extension() == null) {
			LOGGER.warn("RequestMapper is not associated to a AnthropicClaudeRequest_Extension instance");
			return null;
		}
		AnthropicClaudeRequest_Extension claudeExtension = MappingHelper.getAnthropicClaudeMappingHelper_AnthropicClaudeRequest_Extension();
		if (claudeExtension.getAnthropicClaudeRequest_Extension_Request() == null) {
			LOGGER.warn("AnthropicClaudeRequest_Extension is not associated to a Request instance");
			return null;
		}
		return claudeExtension.getAnthropicClaudeRequest_Extension_Request();
	}
	
	private boolean isToolRecall(Tool toolChoiceTool) throws CoreException {
		// Get all messages where ToolCallId is set. These messages indicate that a tool has been called
		List<Message> messageListTool = Core.retrieveByPath(getContext(), getRequest().getMendixObject(), 
				Request.MemberNames.Request_Message.toString()).stream()
				.map(msg -> Message.initialize(getContext(), msg))
				.filter(msg -> msg.getToolCallId() != null && !msg.getToolCallId().isEmpty())
				.collect(Collectors.toList());

		// No tool calls yet; thus no tool recall
		if (messageListTool.size() == 0) {
			return false;
		}
		
		// Get all messages with role assistant
		// Assistant messages optionally have an array of tool_calls that contain an id and the functionName
		List<Message> messageListAssistant = MessageImpl
				.retrieveMessageListByRole(getRequest(), ENUM_MessageRole.assistant, getContext());

		// HashMap with ToolCall._id and ToolCallFunction.Name created from the messageListAssistant
		// The map contains only those tool calls, where functionName equals the toolChoiceFunctionName
		Map<String, String> toolChoiceToolCallMap = getToolChoiceToolCallMap(messageListAssistant, toolChoiceTool);
		
		// Loop over Tool messages and compare ToolCallId with Ids from Assistant
				// messages in HashMap to see whether the function from the Tool Choice has
				// already been called
		return toolCallFound(toolChoiceToolCallMap, messageListTool);
	}
	
	private Map<String, String> getToolChoiceToolCallMap(List<Message> messageListAssistant, Tool toolChoiceTool) {
		Map<String, String> toolChoiceToolCallMap = new HashMap<>();

		for (Message message : messageListAssistant) {

			// Get ToolCall list for each assistant message where the function name equals
			// the function name from the tool choice (toolChoiceFunctionName)
			List<ToolCall> toolCallList = Core.retrieveByPath(getContext(), message.getMendixObject(),
							Message.MemberNames.Message_ToolCall.toString())
					.stream()
					.filter(mxObject -> {
						return filterToolCallByFunctionName(toolChoiceTool.getName(), mxObject);
					})
					.map(mxObject -> ToolCall.initialize(getContext(), mxObject))
					.collect(Collectors.toList());

			// Loop over toolCallList and add _id and functionName to a HashMap
			for (ToolCall toolCall : toolCallList) {
				String toolCallId = toolCall.getToolCallId();
				String toolName = toolCall.getName();
				toolChoiceToolCallMap.put(toolCallId, toolName);
			}
		}
		
		return toolChoiceToolCallMap;
	}
	
	private boolean toolCallFound(Map<String, String> toolChoiceToolCallMap, List<Message> messageListTool) {
		for (Message messageTool : messageListTool) {
			String toolId = messageTool.getToolCallId();
			if (toolChoiceToolCallMap.containsKey(toolId)) {
				return true;
			}
		}
		return false;
	}
	
	private boolean filterToolCallByFunctionName(String toolChoiceFunctionName, IMendixObject mxObject) {
		String functionName = "";
		functionName = ToolCall.initialize(getContext(), mxObject).getName();
		// Return true if the functionName equals toolChoiceFunctionName
		return functionName.equals(toolChoiceFunctionName);
	}
	
	private ObjectNode createToolChoiceNode(Tool toolChoiceTool) {
		ObjectNode toolChoiceNode = MAPPER.createObjectNode();
        toolChoiceNode.put("type", ENUM_ToolChoice.tool.toString());
        toolChoiceNode.put("name", toolChoiceTool.getName());
        return toolChoiceNode;
	}
	
	private ObjectNode createFunctionParametersNode(String functionMicroflow, ObjectMapper MAPPER) {
		String inputParamName = FunctionMappingImpl.getFirstInputParamName(functionMicroflow);
		// FunctionImpl.getFirstInputParamName(functionMicroflow);
		if (inputParamName == null || inputParamName.isBlank()) {
			return null;
		}

		ObjectNode parametersNode = MAPPER.createObjectNode();
		ObjectNode propertiesNode = MAPPER.createObjectNode();
		ObjectNode propertyNode = MAPPER.createObjectNode(); 
		ArrayNode requiredNode = MAPPER.createArrayNode();
		
		propertyNode.put("type", "string");
		
		propertiesNode.set(inputParamName, propertyNode);
		
		requiredNode.add(inputParamName);
		
		parametersNode.put("type", "object");
		parametersNode.set("properties", propertiesNode);
		parametersNode.set("required", requiredNode);
		
		return parametersNode;
	}
	
	// END EXTRA CODE
}
