// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazonbedrockconnector.actions;

import static java.util.Objects.requireNonNull;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import amazonbedrockconnector.impl.MxLogger;

public class JA_TitanEmbeddings_ModifyJson_Response extends CustomJavaAction<java.lang.String>
{
	private final java.lang.String ResponseBody_ToBeModified;

	public JA_TitanEmbeddings_ModifyJson_Response(
		IContext context,
		java.lang.String _responseBody_ToBeModified
	)
	{
		super(context);
		this.ResponseBody_ToBeModified = _responseBody_ToBeModified;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		// Import necessary packages


		try {
			requireNonNull(this.ResponseBody_ToBeModified, "ResponseBody String is required");
        // Initialize ObjectMapper with full response body as received from Cohere Embed
			ObjectNode root = (ObjectNode) mapper.readTree(ResponseBody_ToBeModified);			
			
			if (isRootEmpty(root)) {
				LOGGER.warn("Root node is empty or does not contain required fields.");
				return null;
			} {
				
				ArrayNode embeddingArray = (ArrayNode) root.get("embedding");

				// Convert embedding array to a string
				String embeddingString = embeddingArray.toString();

				// Create a new ObjectNode for the result
				ObjectNode result = mapper.createObjectNode();

				// Create an ArrayNode to hold the embedding string as a single element
				ArrayNode embeddingStringArray = mapper.createArrayNode();
				embeddingStringArray.add(new TextNode(embeddingString));

				// Add the embedding string array to the result
				result.set("embedding", embeddingStringArray);


				// Add the inputTextTokenCount to the result
				JsonNode inputTextTokenCount = root.get("inputTextTokenCount");
				result.set("inputTextTokenCount", inputTextTokenCount);

				return mapper.writeValueAsString(result);

			}


			} catch (Exception e) {
				LOGGER.error("Error occurred while modifying Titan Embeddings response body: " + e.getMessage());
				throw e;
			}

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_TitanEmbeddings_ModifyJson_Response";
	}

	// BEGIN EXTRA CODE

	private static final MxLogger LOGGER = new MxLogger(JA_TitanEmbeddings_ModifyJson_Response.class);
	private static final ObjectMapper mapper = new ObjectMapper();

	private boolean isRootEmpty(ObjectNode root) {
		// Check if root is null
			if (root == null) {
				return true;
			}
			
			// Check if the 'embedding' key is present and contains a non-null array
			if (!root.hasNonNull("embedding") || !root.get("embedding").isArray()) {
				return true;
			}
			
			// Check if the 'embedding' array is empty
			ArrayNode embeddingArray = (ArrayNode) root.get("embedding");
			return embeddingArray.size() == 0;
	}

	// END EXTRA CODE
}
