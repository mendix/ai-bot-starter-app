// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazonbedrockconnector.actions;

import static java.util.Objects.requireNonNull;
import java.util.List;
import java.util.stream.Collectors;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import amazonbedrockconnector.impl.AmazonBedrockClient;
import amazonbedrockconnector.impl.MxDataSource;
import amazonbedrockconnector.impl.MxLogger;
import amazonbedrockconnector.proxies.ConfluenceSourceConfiguration;
import amazonbedrockconnector.proxies.CreateDataSourceResponse;
import amazonbedrockconnector.proxies.ENUM_DataSourceType;
import amazonbedrockconnector.proxies.S3DataSourceConfiguration;
import amazonbedrockconnector.proxies.SharePointSourceConfiguration;
import amazonbedrockconnector.proxies.Site;
import software.amazon.awssdk.services.bedrockagent.BedrockAgentClient;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.UserAction;

public class CreateDataSource extends UserAction<IMendixObject>
{
	/** @deprecated use Credentials.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Credentials;
	private final awsauthentication.proxies.Credentials Credentials;
	private final awsauthentication.proxies.ENUM_Region Region;
	/** @deprecated use CreateDataSourceRequest.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __CreateDataSourceRequest;
	private final amazonbedrockconnector.proxies.CreateDataSourceRequest CreateDataSourceRequest;

	public CreateDataSource(
		IContext context,
		IMendixObject _credentials,
		java.lang.String _region,
		IMendixObject _createDataSourceRequest
	)
	{
		super(context);
		this.__Credentials = _credentials;
		this.Credentials = _credentials == null ? null : awsauthentication.proxies.Credentials.initialize(getContext(), _credentials);
		this.Region = _region == null ? null : awsauthentication.proxies.ENUM_Region.valueOf(_region);
		this.__CreateDataSourceRequest = _createDataSourceRequest;
		this.CreateDataSourceRequest = _createDataSourceRequest == null ? null : amazonbedrockconnector.proxies.CreateDataSourceRequest.initialize(getContext(), _createDataSourceRequest);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			// Validating JA input parameters
			requireNonNull(Credentials, "AWS Credentials are required");
			requireNonNull(CreateDataSourceRequest, "CreateDataSourceRequest is required");
			requireNonNull(Region, "AWS Region is required");
			
			validateRequest();
						
			BedrockAgentClient client = AmazonBedrockClient.getBedrockAgentClient(Credentials, Region, CreateDataSourceRequest);
			
			software.amazon.awssdk.services.bedrockagent.model.CreateDataSourceRequest awsRequest = createAwsRequest();
			LOGGER.info("AWS request: " + awsRequest);
			
			software.amazon.awssdk.services.bedrockagent.model.CreateDataSourceResponse awsResponse = client.createDataSource(awsRequest);
			LOGGER.info("AWS response: " + awsResponse);
			
			return getMxResponse(awsResponse).getMendixObject();
		
		} catch (Exception e) {
			LOGGER.error(e.getMessage());
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreateDataSource";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(CreateDataSource.class);
	
	private void validateRequest() throws CoreException {
		
		if (this.CreateDataSourceRequest.getKnowledgeBaseId() == null || this.CreateDataSourceRequest.getKnowledgeBaseId().isBlank()) {
			throw new IllegalArgumentException("KnowledgeBaseId is required.");
		}
		if (this.CreateDataSourceRequest.getName() == null || this.CreateDataSourceRequest.getName().isBlank()) {
			throw new IllegalArgumentException("Name is required.");
		}
		if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest() == null) {
			throw new IllegalArgumentException("CreateDataSourceConfiguration is required.");
		} else {
			if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getDataSourceType() == null) {
				throw new IllegalArgumentException("DataSourceType is required.");
			}
		}
		
	}
	
	private software.amazon.awssdk.services.bedrockagent.model.CreateDataSourceRequest createAwsRequest() throws CoreException{
			
			software.amazon.awssdk.services.bedrockagent.model.CreateDataSourceRequest.Builder awsRequestBuilder = software.amazon.awssdk.services.bedrockagent.model.CreateDataSourceRequest.builder();
			awsRequestBuilder.knowledgeBaseId(this.CreateDataSourceRequest.getKnowledgeBaseId());
			awsRequestBuilder.name(this.CreateDataSourceRequest.getName());
			awsRequestBuilder.dataSourceConfiguration(getAwsDataSourceConfiguration());
			
			if (this.CreateDataSourceRequest.getDescription() != null && !this.CreateDataSourceRequest.getDescription().isBlank()) {
				awsRequestBuilder.description(getActionName());
			}
			
			
			return awsRequestBuilder.build();
			
		}
	
	private software.amazon.awssdk.services.bedrockagent.model.DataSourceConfiguration getAwsDataSourceConfiguration() throws CoreException{
		
		software.amazon.awssdk.services.bedrockagent.model.DataSourceConfiguration.Builder awsRequestBuilder = software.amazon.awssdk.services.bedrockagent.model.DataSourceConfiguration.builder();
		
		ENUM_DataSourceType type = this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getDataSourceType(); 
		awsRequestBuilder.type(type.name());
		
		switch(type) {
		
		case CONFLUENCE:
			awsRequestBuilder.confluenceConfiguration(getAwsConfluenceDataSourceConfiguration());
			break;
			
		case S3:
			awsRequestBuilder.s3Configuration(getS3DataSourceConfiguration());
			break;
			
		case SHAREPOINT:
			throw new IllegalArgumentException("The chosen datasource type is not supported. Please look into the documentation of the connector.");
			//awsRequestBuilder.sharePointConfiguration(getSharePointDataSourceConfiguration());
			//break;
			
		default:
			throw new IllegalArgumentException("The chosen datasource type is not supported. Please look into the documentation of the connector.");
		}
		
		
		return awsRequestBuilder.build();
	}
	
	// Confluence
	private software.amazon.awssdk.services.bedrockagent.model.ConfluenceDataSourceConfiguration getAwsConfluenceDataSourceConfiguration() throws CoreException{
	
		validateConfluenceDataSourceConfiguration();
		
		software.amazon.awssdk.services.bedrockagent.model.ConfluenceDataSourceConfiguration awsRequest = software.amazon.awssdk.services.bedrockagent.model.ConfluenceDataSourceConfiguration.builder()
					.sourceConfiguration(getAwsConfluenceSourceConfiguration())
					.build();
		
		return awsRequest;
	}
	
	private software.amazon.awssdk.services.bedrockagent.model.ConfluenceSourceConfiguration getAwsConfluenceSourceConfiguration() throws CoreException{
		
		ConfluenceSourceConfiguration mxConfluenceSourceConfiguration =this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getConfluenceDataSourceConfiguration_DataSourceConfiguration().getConfluenceSourceConfiguration_ConfluenceDataSourceConfiguration();
		
		software.amazon.awssdk.services.bedrockagent.model.ConfluenceSourceConfiguration awsRequest = software.amazon.awssdk.services.bedrockagent.model.ConfluenceSourceConfiguration.builder()
				.authType(mxConfluenceSourceConfiguration.getAuthType().name())	
				.credentialsSecretArn(mxConfluenceSourceConfiguration.getCredentialsSecretARN())		
				.hostType(mxConfluenceSourceConfiguration.getHostType().name())	
				.hostUrl(mxConfluenceSourceConfiguration.getHostURL())
				.build();
		
		return awsRequest;
	}
	
	private void validateConfluenceDataSourceConfiguration() throws CoreException {
		if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getConfluenceDataSourceConfiguration_DataSourceConfiguration() == null) {
			throw new IllegalArgumentException("ConfluenceDataSourceConfiguration is required if 'Confluence' is chosen as the datasource type.");
		} else if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getConfluenceDataSourceConfiguration_DataSourceConfiguration().getConfluenceSourceConfiguration_ConfluenceDataSourceConfiguration() == null) {
			throw new IllegalArgumentException("ConfluenceSourceConfiguration is required if 'Confluence' is chosen as the datasource type.");
		}
		
		ConfluenceSourceConfiguration mxConfluenceSourceConfiguration = this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getConfluenceDataSourceConfiguration_DataSourceConfiguration().getConfluenceSourceConfiguration_ConfluenceDataSourceConfiguration();
		if (mxConfluenceSourceConfiguration.getAuthType() == null) {
			throw new IllegalArgumentException("AuthType is required.");
		}
		if (mxConfluenceSourceConfiguration.getCredentialsSecretARN() == null || mxConfluenceSourceConfiguration.getCredentialsSecretARN().isBlank()) {
			throw new IllegalArgumentException("CredentialsSecretARN is required.");
		}
		if (mxConfluenceSourceConfiguration.getHostType() == null) {
			throw new IllegalArgumentException("HostType is required.");
		} 
		if (mxConfluenceSourceConfiguration.getHostURL() == null || mxConfluenceSourceConfiguration.getHostURL().isBlank()) {
			throw new IllegalArgumentException("HostURL is required.");
		} 
	}
	
	// S3
	private software.amazon.awssdk.services.bedrockagent.model.S3DataSourceConfiguration getS3DataSourceConfiguration() throws CoreException{
		
		S3DataSourceConfiguration mxS3DataSourceConfiguration = this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getS3DataSourceConfiguration_DataSourceConfiguration();
		
		validateS3DataSourceConfiguration(mxS3DataSourceConfiguration);
		
		software.amazon.awssdk.services.bedrockagent.model.S3DataSourceConfiguration.Builder awsRequestBuilder = software.amazon.awssdk.services.bedrockagent.model.S3DataSourceConfiguration.builder()
				.bucketArn(mxS3DataSourceConfiguration.getBucketARN());
		
		if (mxS3DataSourceConfiguration.getBucketOwnerAccountId() != null && !mxS3DataSourceConfiguration.getBucketOwnerAccountId().isBlank()) {
			awsRequestBuilder.bucketOwnerAccountId(mxS3DataSourceConfiguration.getBucketOwnerAccountId());
		} 		
		
		return awsRequestBuilder.build();
	}
	
	private void validateS3DataSourceConfiguration(S3DataSourceConfiguration mxS3DataSourceConfiguration ) throws CoreException {
		if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getS3DataSourceConfiguration_DataSourceConfiguration() == null) {
			throw new IllegalArgumentException("S3DataSourceConfiguration is required if 'S3' is chosen as the datasource type.");
		}
		if (mxS3DataSourceConfiguration.getBucketARN() == null || mxS3DataSourceConfiguration.getBucketARN().isBlank()) {
			throw new IllegalArgumentException("BucketARN is required.");
		}
	}
	
	// SharePoint
	private software.amazon.awssdk.services.bedrockagent.model.SharePointDataSourceConfiguration getSharePointDataSourceConfiguration() throws CoreException{
		
		validateSharePointDataSourceConfiguration();
		
		software.amazon.awssdk.services.bedrockagent.model.SharePointDataSourceConfiguration awsRequest = software.amazon.awssdk.services.bedrockagent.model.SharePointDataSourceConfiguration.builder()
					.sourceConfiguration(getSharePointSourceConfiguration())
					.build();
		
		return awsRequest;
	}
	
	private software.amazon.awssdk.services.bedrockagent.model.SharePointSourceConfiguration getSharePointSourceConfiguration() throws CoreException{
		
		SharePointSourceConfiguration mxSharePointSourceConfiguration= this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getSharePointDataSourceConfiguration_DataSourceConfiguration().getSharePointSourceConfiguration_SharePointDataSourceConfiguration();
		
		List<Site> mxSiteList =  Core.retrieveByPath(getContext(), mxSharePointSourceConfiguration.getMendixObject(), Site.MemberNames.Site_SharePointSourceConfiguration.toString()).stream()
				.map(mxObj -> Site.initialize(getContext(), mxObj))
				.collect(Collectors.toList());
				
		software.amazon.awssdk.services.bedrockagent.model.SharePointSourceConfiguration awsRequest = software.amazon.awssdk.services.bedrockagent.model.SharePointSourceConfiguration.builder()
				.authType(mxSharePointSourceConfiguration.getAuthType().name())	
				.credentialsSecretArn(mxSharePointSourceConfiguration.getCredentialsSecretArn())
				.domain(mxSharePointSourceConfiguration.getDomain())
				.hostType(mxSharePointSourceConfiguration.getHostType().name())	
				.siteUrls(mxSiteList.toArray().toString())
				.build();
		
		return awsRequest;
	}
	
	private void validateSharePointDataSourceConfiguration() throws CoreException {
		if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getSharePointDataSourceConfiguration_DataSourceConfiguration() == null) {
			throw new IllegalArgumentException("SharePointDataSourceConfiguration is required if 'SharePoint' is chosen as the datasource type.");
		} else if (this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getSharePointDataSourceConfiguration_DataSourceConfiguration().getSharePointSourceConfiguration_SharePointDataSourceConfiguration() == null) {
			throw new IllegalArgumentException("SharePointSourceConfiguration is required if 'SharePoint' is chosen as the datasource type.");
		}
		
		SharePointSourceConfiguration mxSharePointSourceConfiguration= this.CreateDataSourceRequest.getCreateDataSourceConfiguration_CreateDataSourceRequest().getSharePointDataSourceConfiguration_DataSourceConfiguration().getSharePointSourceConfiguration_SharePointDataSourceConfiguration();
		if (mxSharePointSourceConfiguration.getAuthType() == null) {
			throw new IllegalArgumentException("AuthType is required.");
		}
		if (mxSharePointSourceConfiguration.getCredentialsSecretArn() == null || mxSharePointSourceConfiguration.getCredentialsSecretArn().isBlank()) {
			throw new IllegalArgumentException("CredentialsSecretARN is required.");
		}
		if (mxSharePointSourceConfiguration.getDomain() == null || mxSharePointSourceConfiguration.getDomain().isBlank()) {
			throw new IllegalArgumentException("Domain is required.");
		}
		if (mxSharePointSourceConfiguration.getHostType() == null) {
			throw new IllegalArgumentException("HostType is required.");
		} 
		
		List<Site> mxSiteList =  Core.retrieveByPath(getContext(), mxSharePointSourceConfiguration.getMendixObject(), Site.MemberNames.Site_SharePointSourceConfiguration.toString()).stream()
			.map(mxObj -> Site.initialize(getContext(), mxObj))
			.collect(Collectors.toList());
		
		if (mxSiteList != null) {
			throw new IllegalArgumentException("Minimum one SiteURL is required.");
		} 
	}
	
	
	private CreateDataSourceResponse getMxResponse(software.amazon.awssdk.services.bedrockagent.model.CreateDataSourceResponse awsResponse) {
			
		CreateDataSourceResponse mxResponse = new CreateDataSourceResponse(getContext());
		MxDataSource.getMxDataSource(mxResponse,awsResponse.dataSource(),getContext());
		
		return mxResponse;
	}
	// END EXTRA CODE
}
