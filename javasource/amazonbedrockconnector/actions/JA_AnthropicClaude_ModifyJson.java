// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package amazonbedrockconnector.actions;

import static java.util.Objects.requireNonNull;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import amazonbedrockconnector.impl.MxLogger;
import amazonbedrockconnector.proxies.ENUM_MessageType_AnthropicClaude;

public class JA_AnthropicClaude_ModifyJson extends CustomJavaAction<java.lang.String>
{
	private java.lang.String AnthropicClaudeRequest_Json;

	public JA_AnthropicClaude_ModifyJson(IContext context, java.lang.String AnthropicClaudeRequest_Json)
	{
		super(context);
		this.AnthropicClaudeRequest_Json = AnthropicClaudeRequest_Json;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		requireNonNull(this.AnthropicClaudeRequest_Json, "AnthropicClaudeRequest_Json is required");
		
		ObjectNode rootNode = (ObjectNode) MAPPER.readTree(AnthropicClaudeRequest_Json);
		
		modifyMessageNodes(rootNode);
		
		LOGGER.debug("modified Json: " + rootNode);
		return MAPPER.writeValueAsString(rootNode);
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_AnthropicClaude_ModifyJson";
	}

	// BEGIN EXTRA CODE
	private static final MxLogger LOGGER = new MxLogger(JA_AnthropicClaude_ModifyJson.class);
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	private void modifyMessageNodes(ObjectNode rootNode) {
		// messages Node
		ArrayNode messagesNode = (ArrayNode) rootNode.get("messages");
		
		for (JsonNode messageNode : messagesNode) {
			
			// Message Object 
			ObjectNode message = (ObjectNode) messageNode;
			
			// ImageCollection node to transform into format that is expected by Claude
			ArrayNode imageCollectionsNode = (ArrayNode) message.get("imageCollection");
			
			// Transformation is only necessary if a ImageCollection was passed
			if (imageCollectionsNode != null && imageCollectionsNode.size() > 0) {
				
				ArrayNode newContentNode = MAPPER.createArrayNode();
				
				for (JsonNode imageCollectionNode : imageCollectionsNode) {
					
					// Add a the TextContent prior to the image
					if (imageCollectionNode.has("textContent")) {
						String textContent = imageCollectionNode.get("textContent").asText();
						if (textContent != null && !textContent.isBlank()) {
							addTextNode(textContent, newContentNode);
						}
					}
					
					
					// transforming the ImageCollection into the correct format
					addImageNode(imageCollectionNode, newContentNode);
				}
				
				// If present, add the text content from the Message.Content attribute.	
				if (message.has("content")) {
					String messageContent = message.get("content").asText();
					if (messageContent != null && !messageContent.isBlank()) {
						addTextNode(messageContent, newContentNode);
					}
				}
				
				
				// replacing the content attribute with the new Content node
				message.remove("content");
				message.set("content", newContentNode);
			} 
				
				// Always remove the ImageCollection Node at the end
				message.remove("imageCollection");
		}
	}
	
	private void addTextNode(String text, ArrayNode contentNode) {
		ObjectNode newTextNode = MAPPER.createObjectNode();
		newTextNode.put("type", ENUM_MessageType_AnthropicClaude.text.toString());
		newTextNode.put("text", text);
		
		contentNode.add(newTextNode);
	}
	
	private void addImageNode(JsonNode imageCollectionNode, ArrayNode contentNode) {
		ObjectNode newImageNode = MAPPER.createObjectNode();
		newImageNode.put("type", ENUM_MessageType_AnthropicClaude.image.toString());
		ObjectNode sourceNode = MAPPER.createObjectNode();
		sourceNode.put("type", "base64");
		sourceNode.put("media_type", getAttributeFromNode(imageCollectionNode,"mediaType"));
		sourceNode.put("data", getAttributeFromNode(imageCollectionNode,"fileContent"));
		newImageNode.set("source", sourceNode);
		
		contentNode.add(newImageNode);
	}
	
	private String getAttributeFromNode(JsonNode node, String attributeName) {
		if(!node.has(attributeName)) {
			LOGGER.error("Request FileContent is missing required attribute: " + attributeName);
			throw new IllegalArgumentException("Request FileContent is missing required attribute: " + attributeName);
		}
		String value = node.get(attributeName).asText();
		if (value == "image/jpg") {
			value = "image/jpeg";
		}
		
		return value;
		
	}
	// END EXTRA CODE
}
